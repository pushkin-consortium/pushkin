{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>\u201cGetting Started\u201d will get a very simple demo site up and running. The remaining pages explain how to customize your website. Instructions are geared towards someone who ideally has at least some familiarity with JavaScript and React. Sections intended for more experienced programmers who need to understand the guts of Pushkin are labeled under Developers. See the full Table of contents here.</p> <p>To get the latest news and updates on Pushkin, sign up for our newsletter here</p>"},{"location":"#important-note","title":"\ud83d\udea8 Important Note","text":"<p>Due to an update in AWS resources, the CLI-based AWS deploy does not currently work and is being updated. In the meantime, you can still manually deploy to AWS.</p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ul> <li>Getting Started</li> <li>Installing Pushkin and dependencies<ul> <li>macOS</li> <li>Windows 10</li> <li>Windows Subsystem for Linux (preferred)</li> <li>AWS EC2 Instance </li> <li>Ubuntu Linux</li> </ul> </li> <li>Quickstart</li> <li> <p>Deploying to AWS</p> <ul> <li>Install required software.</li> <li>Configure the AWS and ECS CLIs.</li> <li>Register a domain.</li> <li>Set up DockerHub.</li> <li>Initialize AWS Deploy.</li> </ul> </li> <li> <p>Tutorial: Simple Experiment</p> </li> <li> <p>FAQ</p> </li> <li> <p>FAQ</p> </li> <li> <p>Advanced</p> </li> <li>Pushkin CLI<ul> <li>config</li> <li>install site</li> <li>install experiment</li> <li>updateDB</li> <li>prep</li> <li>start</li> <li>stop</li> <li>kill</li> <li>armageddon</li> <li>help</li> </ul> </li> <li>Using Experiment Templates<ul> <li>Lexical decision template</li> <li>Grammaticality judgment template</li> <li>Self-paced reading template</li> </ul> </li> <li>Experiment Structure<ul> <li>Config File</li> <li>Experiment Web Page Component</li> <li>Recommended Structure</li> <li>Customizing the client</li> <li>Worker</li> <li>Migrations</li> <li>Seeds</li> </ul> </li> <li>Pushkin Client<ul> <li>connect</li> <li>loadScript</li> <li>loadScripts</li> <li>prepExperimentRun</li> <li>getAllStimuli</li> <li>setSaveAfterEachStimulus</li> <li>saveStimulusResponse</li> <li>insertMetaResponse</li> <li>endExperiment</li> <li>customApiCall</li> </ul> </li> <li>pushkin-api<ul> <li>Controller Builder</li> <li>Core API</li> </ul> </li> <li>Users &amp; Authentication<ul> <li>Generating UserIDs</li> <li>Using UserIDs</li> </ul> </li> <li>Modifying Site Template<ul> <li>React Bootstrap</li> <li>Header and Footer</li> <li>Home Page</li> <li>Findings Page</li> <li>About Page</li> <li>Feedback Page</li> </ul> </li> <li> <p>Deployment</p> <ul> <li>Deleting AWS</li> </ul> </li> <li> <p>Developers</p> </li> <li>Developing with Pushkin</li> <li>Getting Started on Development<ul> <li>Understanding the Front End</li> <li>Understanding Docker</li> <li>Testing Pushkin Modules Locally</li> <li>Pushkin jsPsych</li> </ul> </li> <li>Testing Pushkin with Jest</li> <li>Working with Templates</li> </ul>"},{"location":"advanced/pushkin-cli/","title":"Pushkin CLI","text":""},{"location":"advanced/pushkin-cli/#skip-to-section","title":"Skip to section","text":"<ul> <li>installation</li> <li>update</li> <li>commands</li> <li>config</li> <li>install site</li> <li>install experiment</li> <li>updateDB</li> <li>prep</li> <li>start</li> <li>stop</li> <li>kill</li> <li>armageddon</li> <li>help</li> </ul>"},{"location":"advanced/pushkin-cli/#installation","title":"installation","text":"<p>The Pushkin command-line package is available via Yarn. We highly recommend a global install in order to make working with Pushkin projects as easy as possible:</p> <pre><code> yarn global add pushkin-cli\n</code></pre>"},{"location":"advanced/pushkin-cli/#update","title":"update","text":"<p>To update the Pushkin CLI to the most recently released version, run:</p> <pre><code> yarn global upgrade pushkin-cli --latest\n</code></pre> <p>Any subcommand that affects a specific project must be run from a folder inside the project you wish to modify.</p> <p>The CLI has the following subcommands:</p>"},{"location":"advanced/pushkin-cli/#config","title":"config","text":"<p>Syntax: <code>pushkin config [what]</code></p> <p>View config file for what, replacing what with site or any of the installed experiments by name. Defaults to all.</p>"},{"location":"advanced/pushkin-cli/#install-site","title":"install site","text":"<p>Syntax: <code>pushkin install site</code></p> <p>Downloads Pushkin site template. It first will prompt for which site template, then which version. Most often, the latest version will be the best option.</p> <p>The command <code>pushkin install site</code> has two optional arguments: <code>--verbose</code> and <code>--help</code>.</p> <p>Run <code>pushkin install site --verbose</code> to see additional console output which may be helpful for debugging.</p> <p>Running <code>pushkin install site --help</code> will display help for the command.</p>"},{"location":"advanced/pushkin-cli/#install-experiment","title":"install experiment","text":"<p>Syntax: <code>pushkin install experiment</code></p> <p>Downloads an experiment template. First will prompt for which experiment template (see current list here), then prompt for a version to be selected. Most often, the latest version will be the best option.</p> <p>If you select the basic template, you will also be asked if you want to import a plain jsPsych experiment.html. If you answer 'yes', a new experiment.js will be automatically generated from the provided file. If you answer 'no', experiment.js will remain as a \"Hello, world!\" example.</p> <p>The command <code>pushkin install experiment</code> has two optional arguments: <code>--verbose</code> and <code>--help</code>.</p> <p>Run <code>pushkin install experiment --verbose</code> to see additional console output which may be helpful for debugging.</p> <p>Running <code>pushkin install experiment --help</code> will display help for the command.</p>"},{"location":"advanced/pushkin-cli/#details-of-importing-an-existing-jspsych-experiment","title":"Details of importing an existing jsPsych experiment","text":"<p>Selecting the basic template (v5+) will give you the option to import an existing jsPsych experiment (note that the latest basic template and thus this feature only support jsPsych 7+). This feature assumes a workflow where you first implement the basics of your experiment design as a standalone jsPsych experiment, which is a bit faster to test, before turning it into a Pushkin experiment. This feature executes two tasks: (1) identifying which jsPsych plugins you're using and (2) extracting the code which builds up the experiment's timeline. In order for these tasks to be sucessful, keep the following in mind:</p> <ul> <li> <p>Plugin identification</p> </li> <li> <p>Only jsPsych plugins available via npm can be added automatically (any package scoped under @jspsych, @jspsych-contrib, or @jspsych-timelines). Custom plugins can still be used in your experiment, but you'll need to add them manually, as described here.</p> </li> <li>Your experiment.html must use CDN-hosted plugins or import the plugins from npm. Plugins which you've downloaded and are hosting yourself will not be added automatically. See jsPsych's documentation for details.</li> <li>If your experiment.html specifies a specific version of a plugin, <code>pushkin install experiment</code> records the version number or tag in a comment after the import statement in experiment.js. This comment, if present, is later read by <code>pushkin prep</code> in order to add that particular version to your experiment. Before running <code>prep</code>, you may edit the version number in order to change the version in your experiment, but be careful not to change the format of the comment.</li> <li>If you you've forgetten to import a plugin in experiment.html, it won't be added to your Pushkin experiment. In this case, your experiment.html wouldn't be running, so you should hopefully be aware of the problem before trying to import the experiment into Pushkin.</li> <li> <p>Likewise, if you import any extraneous plugins that aren't being used in experiment.html, they will also be added to your Pushkin experiment.</p> </li> <li> <p>Timeline extraction</p> </li> <li> <p>This feature works simply by looking for the argument you provide to <code>jsPsych.run()</code> and copying everything from where that variable is declared until before <code>jsPsych.run()</code> is called. Consequently, the argument of <code>jsPsych.run()</code> must be the name of an array of timeline objects, not the array itself.</p> </li> <li>Likewise, whatever you name the argument of <code>jsPsych.run()</code>, it must be declared before any of its component timeline objects are created. This is fairly standard practice, as something like <code>const timeline = [];</code> is usually near the top of most jsPsych experiments.</li> <li>Your experiment's equivalent to <code>const timeline = [];</code> can't come before initializing jsPsych (i.e. <code>const jsPsych = initJsPsych();</code>). You don't want to call <code>initJsPsych()</code> in a Pushkin experiment.js (rather, it's called in index.js).</li> <li>Any specifications for your stimuli must be created inside your experiment.html between the two lines of the script mentioned above. If your stimuli rely on other files, you'll need to add them manually as described here. This includes non-inline CSS styling (see the lexical decision template for how to include custom CSS in the experiment.css file).</li> </ul>"},{"location":"advanced/pushkin-cli/#updatedb","title":"updateDB","text":"<p>Syntax: <code>pushkin updateDB</code></p> <p>Runs migrations and seeds for experiments to update the database. This is set up to ensure experiments using the same database (as defined in <code>pushkin.yaml</code>) are migrated at the same time to avoid errors with the knex_migrations table. This is automatically run as part of <code>pushkin prep</code></p>"},{"location":"advanced/pushkin-cli/#prep","title":"prep","text":"<p>Syntax: <code>pushkin prep</code></p> <p>Run inside a Pushkin project to prepare Pushkin to be run for local testing. Packages generated by yarn inside each experiment\u2019s web page and api controllers directories are moved to the core Pushkin code, installed there, and linked to the core code. Previous modules are uninstalled and removed.</p> <p>The command <code>pushkin prep</code> has three optional arguments: <code>--nomigrations</code>, <code>--verbose</code>, and <code>--help</code>.</p> <p>Run <code>pushkin prep --nomigrations</code> if you do not want to run migrations. If you do this, make sure the database structure has not changed.</p> <p>Run <code>pushkin prep --verbose</code> to see additional console output which may be helpful for debugging.</p> <p>Running <code>pushkin prep --help</code> will display help for the command.</p>"},{"location":"advanced/pushkin-cli/#details","title":"Details","text":"<p>The code for <code>prep</code> is a bit convoluted (sorry). It loops through each experiment in the experiments folder (as defined by <code>pushkin.yaml</code>). For each experiment, it does the following:</p> <ul> <li>It compiles and then tarballs the api controllers. These are moved to <code>pushkin/api/tempPackages</code>. This package is then added as a local package to <code>pushkin/api/package.json</code>, which allows them to be called during production.</li> <li>It compiles the worker and then builds a docker image for it. It is then added to <code>docker-compose.dev.yml</code> so that docker knows to include it when the website is built.</li> <li>It compiles and tarballs <code>web page</code> and moves it to <code>pushkin/front-end/tempPackages</code>. This package is then added as a local package to <code>pushkin/front-end/tempPackages</code>.</li> </ul> <p>Finally, it updates <code>pushkin/front-end/src/experiments.js</code> to list each experiment, along with key information from the experiment\u2019s config file. This will be read by the front end to build the list of experiments to display to potential participants.</p> <p>Note that before any of this happens, <code>prep</code> actually goes through and deletes all old tempPackages, cleans up the package.jsons and docker-compose-dev.yml, and empties experiments.js. Thus, to delete an experiment, all you have to do is delete its folder from the experiment folder. (Of course, that won\u2019t get rid of the docker image for the worker, so you\u2019ll need to clean those up by hand periodically.)</p>"},{"location":"advanced/pushkin-cli/#start","title":"start","text":"<p>Syntax: <code>pushkin start [options]</code></p> <p>Starts local deploy for debugging purposes. To start only the front end (no databases), see the manual.</p> <p>The command <code>pushkin start</code> has three optional arguments: <code>--nocache</code>, <code>--verbose</code>, and <code>--help</code>.</p> <p>Running <code>pushkin start --nocache</code> will rebuild all images from scratch without using the cache. By default, this is false.</p> <p>Running <code>pushkin start --verbose</code> will show additional console output which may be helpful for debugging.</p> <p>Running <code>pushkin start --help</code> will display help for the command.</p>"},{"location":"advanced/pushkin-cli/#stop","title":"stop","text":"<p>Syntax: <code>pushkin stop</code></p> <p>Stops the local deploy. This will not remove the local docker images. To do that, see documentation for pushkin kill and pushkin armageddon.</p>"},{"location":"advanced/pushkin-cli/#kill","title":"kill","text":"<p>Syntax: <code>pushkin kill</code></p> <p>Removes all containers and volumes from local Docker, as well as pushkin-specific images. Sometimes, if you're having issues developing or seeing updates to your Pushkin project, it may be helpful to run this command to ensure docker isn't holding any problematic code or issues in containers.</p>"},{"location":"advanced/pushkin-cli/#armageddon","title":"armageddon","text":"<p>Syntax: <code>pushkin armageddon</code></p> <p>Complete reset of the local docker, including containers, volumes, and third-party images. Sometimes, if you're having issues developing or seeing updates to your Pushkin project, it may be helpful to run this command to ensure docker isn't holding any problematic code or issues in containers/images. This may generate some error messages, which you can safely ignore.</p>"},{"location":"advanced/pushkin-cli/#help","title":"help","text":"<p>Syntax: <code>pushkin help [command]</code></p> <p>Provides information on a specific pushkin command, you can add the command after help (e.g. <code>pushkin help prep</code> to learn about the prep command and its options). Defaults to a list of all commands and general information about each if no command is specified.</p>"},{"location":"advanced/pushkin-client/","title":"Pushkin Client","text":""},{"location":"advanced/pushkin-client/#skip-to-section","title":"Skip to section","text":"<ul> <li>connect</li> <li>loadScript</li> <li>loadScripts</li> <li>prepExperimentRun</li> <li>getAllStimuli</li> <li>saveStimulusResponse</li> <li>insertMetaResponse</li> <li>endExperiment</li> <li>customApiCall</li> </ul> <p>The Pushkin client is available on NPM under <code>pushkin-client</code>. It should be instantiated once imported into a web page:</p> <pre><code>import pushkinClient from \"pushkin-client\";\nconst pushkin = new pushkinClient();\n</code></pre> <p>The module has the following methods:</p>"},{"location":"advanced/pushkin-client/#connect","title":"connect","text":"<p>Arguments:</p> <ul> <li>API URL : string</li> </ul> <p>Location of this experiment\u2019s API endpoint.</p> <p>Returns: Promise. Resolves on successful connection.</p>"},{"location":"advanced/pushkin-client/#loadscript","title":"loadScript","text":"<p>Arguments:</p> <ul> <li>URL : string</li> </ul> <p>URL of a script to load</p> <p>Returns: Promise. Resolves upon successfully loading the script.</p> <p>Useful for loading external jsPsych plugins from a CDN. Scripts are reloaded if already present in the DOM, making sure they run again if a page changes.</p>"},{"location":"advanced/pushkin-client/#loadscripts","title":"loadScripts","text":"<p>Arguments:</p> <ul> <li>URLs : string array</li> </ul> <p>URLs to load.</p> <p>Returns: Promise. Resolves upon successfully loading all scripts.</p> <p>A convenience function. Uses loadScript and Promise.all in the backend.</p>"},{"location":"advanced/pushkin-client/#prepexperimentrun","title":"prepExperimentRun","text":"<p>Arguments: None</p> <p>Returns: Promise. Resolves upon affirmation.</p> <p>Sends a POST request to [expapi]/startExperiment to allow the backend to prepare stimuli for the experiment, if need be. Depends on defaults being enabled in the experiment\u2019s API and worker.</p>"},{"location":"advanced/pushkin-client/#getallstimuli","title":"getAllStimuli","text":"<p>Arguments: None</p> <p>Returns: Promise. Resolves to an array of jsPsych stimuli.</p> <p>Obtains the stimuli for this experiment in one request. Depends on defaults being enabled in the experiment\u2019s API and worker.</p>"},{"location":"advanced/pushkin-client/#savestimulusresponse","title":"saveStimulusResponse","text":"<p>Arguments:</p> <ul> <li>jsPych data object : { user_id : int, \u2026 }</li> </ul> <p>Data to be saved in the database under user_id. Posted to [expapi]/stimulusResponse.</p> <p>Returns: Promise. Resolves upon successful database save.</p> <p>The function setSaveAfterEachStimulus is now deprecated, so saveStimulusResponse is called at the on_data_update event which happens at the end of every jsPsych trial after the on_finish (trial) and on_trial_finish events. The function is added as a parameter when initializing jsPsych in <code>experiments/[experiment]/web page/src/index.js</code> like so:</p> <pre><code>const jsPsych = initJsPsych({\n  ...,\n  on_data_update: (data) =&gt; pushkin.saveStimulusResponse(data),\n});\n</code></pre>"},{"location":"advanced/pushkin-client/#insertmetaresponse","title":"insertMetaResponse","text":"<p>Arguments:</p> <ul> <li>jsPych onfinish data : { user_id : int, \u2026 }</li> </ul> <p>Returns: Promise. Resolves on successful connection.</p>"},{"location":"advanced/pushkin-client/#endexperiment","title":"endExperiment","text":"<p>Arguments: None</p> <p>Returns: Promise. Resolves upon successfully notifying the worker.</p> <p>Notify the worker that the experiment has ended and that it can stop preparing for future stimuli. This should probably be called whenever the user leaves a page in the middle of an experiment as well.</p>"},{"location":"advanced/pushkin-client/#customapicall","title":"customApiCall","text":"<p>Arguments:</p> <ul> <li>path : string</li> </ul> <p>URL of API endpoint to send this call to.</p> <ul> <li>data : object</li> </ul> <p>Data to send to the API endpoint.</p> <ul> <li>httpMethod : string (optional)</li> </ul> <p>A lowercase string of an HTTP method to call the endpoint, such as \u201cget\u201d or \u201cput\u201d.</p> <p>Returns: Promise. Resolves with response data.</p> <p>Simplifies calls to custom API endpoints.</p>"},{"location":"advanced/testing-pushkin-with-jest/","title":"Testing Pushkin with Jest","text":"<p>The content on this page may be out of date - stay tuned for edits!</p> <p>Jest is a JavaScript library for creating, running, and structuring tests.</p> <p>Install Jest using <code>yarn</code>:</p> <pre><code> yarn add --dev jest\n</code></pre> <p>To use Babel, install required dependencies via <code>yarn</code>:</p> <pre><code> yarn add --dev babel-jest @babel/core @babel/preset-env\n</code></pre> <p>Configure Babel to target your current version of Node by creating a <code>babel.config.js</code> file in the root of your project:</p> <pre><code>// babel.config.js\n module.exports = {\n     presets: [\n         [\n             '@babel/preset-env',\n             {\n                 targets: {\n                     node: 'current',\n                 },\n             },\n         ],\n     ],\n };\n</code></pre> <p>The ideal configuration for Babel will depend on your project. See Babel\u2019s docs for more details.</p> <p>To learn more about testing, go to Jest official documentation.</p>"},{"location":"advanced/troubleshooting-pushkin/","title":"Troubleshooting Pushkin","text":""},{"location":"advanced/troubleshooting-pushkin/#error-connection-error","title":"error: connection error","text":"<p>Make sure you are logged into your docker by running the following command: <code>docker login</code></p>"},{"location":"advanced/troubleshooting-pushkin/#error-database-test_db-does-not-exist","title":"error: database \"test_db\" does not exist","text":"<p>In cases where your database does not successfully get set up, it's possible that Postgres is clogging port 5432 on your computer. To check if this is the case run the following in Terminal/your command line: <code>sudo lsof -i tcp:5432</code></p> <p>If Postgres is running on port 5432, run the following to clear it: <code>sudo pkill -u postgres</code></p>"},{"location":"advanced/troubleshooting-pushkin/#cannot-start-service-server-ports-are-not-available-listen-tcp-000080-bind-address-already-in-use","title":"Cannot start service server: Ports are not available: listen tcp 0.0.0.0:80: bind: address already in use","text":"<p>You must have Port 80 open to run your Pushkin site locally, so make sure you aren't running any other web servers there before running <code>pushkin prep</code>. If you encounter this error, you can find what is clogging your Port 80 using the command: <code>lsof -i tcp:80</code>. The output should look something like this:</p> <p></p> <p>Then to clear the port, run the following (replacing <code>&lt;PID&gt;</code> with the PID(s) listed from the lsof command above): <code>kill -9 &lt;PID&gt;</code></p>"},{"location":"advanced/troubleshooting-pushkin/#homebrew-install-not-working","title":"homebrew install not working","text":"<p>Homebrew is not compatible with some shells such as tcsh, try using bash or xsh instead.</p>"},{"location":"advanced/troubleshooting-pushkin/#error-the-migration-directory-is-corrupt-in-pushkin-prep","title":"Error: The migration directory is corrupt in <code>pushkin prep</code>","text":"<p>This can happen when your database is still configured for another Pushkin site set up on your system. Pushkin does not currently support two active Pushkin sites at the same time, so if you would like to switch between Pushkin sites you're working on, you'll have to run <code>pushkin kill</code> before running <code>pushkin prep</code> and make sure that the docker images are cleaned out.</p>"},{"location":"advanced/troubleshooting-pushkin/#error-no-space-left-on-device","title":"Error: no space left on device","text":"<p>If you are using Pushkin on an Amazon EC2 instance and have several experiments installed, you may run out of space on your instance. If you get an error stating that there is no space left on your device, you will need to increase the amount of disk space allocated to your instance in order to continue.</p> <p>At the time of writing, the AWS Free Tier includes 30 GB of Elastic Block storage\u2014the kind of storage your EC2 instance uses\u2014for the first 12 months of your AWS membership. Remember that deploying Pushkin to AWS also includes using some of that storage. Increasing from the default 8 GB of storage to 16 GB might be a good start.</p> <p>This tutorial explains how to increase the disk size of your EC2 instance.</p> <p>You can also try, regardless of the platform you are using, running the command <code>docker system prune</code> might solve the issue:</p> <p>Stackoverflow thread on docker system prune</p>"},{"location":"advanced/troubleshooting-pushkin/#command-failed-docker-buildx-build","title":"Command failed: docker buildx build","text":"<p>If you have an older version of Docker, you might run into this error. The solution is to upgrade Docker: - Confirm that you have at least Docker Engine 23.0 and Docker Desktop 4.19.  - From the commandline, run <code>docker buildx create --name mybuilder --driver docker-container --bootstrap --use</code></p> <p>If you have any problems not listed here, check out our Pushkin forum to see if others have had the same problem or report the problem to our team.</p>"},{"location":"advanced/users-and-authentication/","title":"Users &amp; Authentication","text":"<p>Subject responses are associated with a username. This is either a randomly-generated string, or it\u2019s based off an auth0 userID. The value of the username is maintained in the redux store as <code>UserID</code>.</p> <p>The userID is set by a redux saga:</p> <pre><code>//actions/userInfo.js\n\nexport function getUser(isAuthenticated, user) {\n  return {\n    type: GET_USER,\n    isAuthenticated: isAuthenticated,\n    user: user\n  };\n}\n\n//sagas/userInfo.js\n\nexport function* getUserLogic(action) {\n  console.log('Saga2 initialized...');\n  const id = action.isAuthenticated ?\n    action.user :\n    yield session.get();\n  console.log(id);\n  yield put({ type: SET_USER_ID, id: id });\n}\n\nexport function* getUser() {\n  yield takeLatest(GET_USER, getUserLogic);\n}\n</code></pre> <p>Note that the action needs to be passed <code>isAuthenticated</code> and <code>user</code>, both of which come from the AuthProvidor (see below). For convenience, this saga is triggered every time the Header is loaded (which is on every page):</p> <pre><code>const Header = props =&gt; {\n  const { isAuthenticated, loginWithRedirect, logout, user } = useAuth0();\n  if (!CONFIG.useAuth) {\n    const isAuthenticated = false;\n    const user = null;\n  }\n\n  useEffect(() =&gt; {\n    props.dispatch(getUser(isAuthenticated, user));\n  }, [isAuthenticated, props.userID, user]);\n</code></pre> <p>Note that <code>userEffect</code> is a React lifecycle hook for functional components. It gets triggered when the component is loaded, as well as any time the values of <code>isAuthenticated, props.userID</code> or <code>user</code> change.</p> <p>In principle, this saga could be triggered elsewhere. One thing to keep track of is that because it is asynchronous, components (including the header) may load before the user has been set.</p>"},{"location":"advanced/users-and-authentication/#generating-userids","title":"Generating UserIDs","text":""},{"location":"advanced/users-and-authentication/#randomly-generated-string","title":"Randomly-generated string","text":"<p>If authenticated with auth0 is not enabled, then the value of <code>props.userID</code> comes from a cookie. For that code, see <code>front-end/src/utils/session.js</code>. The purpose of the cookie is to enable the userID to persist across browser refreshes (browser refresh re-initializes the Redux store.) Maximum life of the cookie is 2 days. (We aren\u2019t in the business of tracking people without opt-in consent.)</p> <p>Note that if authentication is not enabled, then the value of <code>isAuthenticated</code> will always be <code>false</code>. (See the variable definitions in the Header component.)</p> <p>Note that the action triggering the creation (or checking) of the cookie (<code>getSessionUser()</code>) is handled by a Redux Saga (see <code>front-end/src/sagas</code>).</p>"},{"location":"advanced/users-and-authentication/#auth0","title":"Auth0","text":"<p>If authentication is enabled, then userIDs can be supplied by auth0. We use code from the auth0 SPA quickstart, which is found in <code>front-end/src/utils/react-auth0-spa.js</code>. This code provides a component that wraps the entire application in <code>front-end/src/index.js</code>:</p> <pre><code>&lt;Auth0Provider\n  domain={CONFIG.authDomain}\n  client_id={CONFIG.authClientID}\n  redirect_uri={window.location.origin}\n  onRedirectCallback={onRedirectCallback}\n&gt;\n  &lt;Provider store={store}&gt;\n    &lt;Router history={customHistory}&gt;\n      &lt;App /&gt;\n    &lt;/Router&gt;\n  &lt;/Provider&gt;\n&lt;/Auth0Provider&gt;,\n</code></pre> <p>As you can see, it looks a lot like the Redux provider. It works similarly: children get access to a few useful variables and methods. You can see this in <code>react-auth0-spa.js</code>:</p> <pre><code>return (\n  &lt;Auth0Context.Provider\n    value={{\n      isAuthenticated,\n      user,\n      loading,\n      popupOpen,\n      loginWithPopup,\n      handleRedirectCallback,\n      getIdTokenClaims: (...p) =&gt; auth0Client.getIdTokenClaims(...p),\n      loginWithRedirect: (...p) =&gt; auth0Client.loginWithRedirect(...p),\n      getTokenSilently: (...p) =&gt; auth0Client.getTokenSilently(...p),\n      getTokenWithPopup: (...p) =&gt; auth0Client.getTokenWithPopup(...p),\n      logout: (...p) =&gt; auth0Client.logout(...p)\n    }}\n  &gt;\n    {children}\n  &lt;/Auth0Context.Provider&gt;\n);\n</code></pre> <p>You will notice <code>user</code>. By default, the value of <code>user</code> is the username from whatever social media application (etc.) the user used to authenticate. This is often the user\u2019s actual name, which we don\u2019t want. So the auth0 quickstart code was modified to retrieve the auth0 numerical ID instead, which is presumably (??) unique to your application. We then immediately run this through a salted hash.</p> <p>Why? It makes it harder to link data in a Pushkin database to a person. That is, someone who had access to your database and to your auth0 account still wouldn\u2019t be able to match the user data to an individual in auth0. They would also need the salt string, which is stored separately. Even if they had it, it would be a pain to use, because you can\u2019t easily decrypt something that has been hashed. The only option would be to encrypt every auth0 ID and then see what in the database matches.</p> <p>They key code is in <code>utils/react-auth0-spa.js</code>. First, we define a helper function:</p> <pre><code>var crypto = require('crypto');\nvar sha512 = function(id, salt){\n    var hash = crypto.createHmac('sha512', salt); /** Hashing algorithm sha512 */\n    hash.update(id);\n    var value = hash.digest('base64');\n    return value;\n};\n</code></pre> <p>There are several different places where userIDs are retrieved. In each case, we encrypt:</p> <pre><code>const claims = await auth0FromHook.getIdTokenClaims();\nconst encrypted = await sha512(claims.sub, CONFIG.salt);\nsetUser(encrypted);\n</code></pre> <p>Finally, note that when users log out of auth0, the <code>userID</code> is set to <code>null</code>:</p> <pre><code>&lt;b.Button onClick={() =&gt; {\n    logout();\n    props.dispatch(setUserID(null));\n    }\n  }&gt;Logout&lt;/b.Button&gt;\n</code></pre> <p>This will trigger the assignment of a new <code>userID</code> via the cookie method.</p>"},{"location":"advanced/users-and-authentication/#using-userids","title":"Using UserIDs","text":"<p><code>userID</code> is automatically available to any component that is connected to the Redux store. This unfortunately does not include the quizzes themselves. Instead, the TakeQuiz component passes the entire Redux store as a prop:</p> <pre><code>class TakeQuiz extends React.Component {\n  render() {\n    const { match } = this.props;\n    const QuizComponent = expObject[match.params.quizName];\n    return (\n      &lt;div&gt;\n        &lt;QuizComponent {...this.props} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>(Note that TakeQuiz is a connected component, so its props include the entire Redux store.)</p> <p>Most of the methods for Pushkin-Client expect to be explicitly sent the userID. This can be done from within the QuizComponent. For example:</p> <pre><code>endExperiment() {\n  this.setState({ experimentComplete: true });\n  pushkin.endExperiment(this.props.userID);\n}\n</code></pre> <p>The exception is any Pushkin Client method that is called directly by jsPsych\u2019s <code>onFinish</code> function. This is because this function takes a single argument, which is trial data. Here is an example:</p> <pre><code>saveStimulusResponse(data) {\n  // Because we are saving data, it should be coming with a userID already\n  // Might make sense at some point to confirm this is what we expect\n  const postData = {\n    user_id: data.user_id,\n    data_string: data\n  };\n  return this.con.post('/stimulusResponse', postData);\n}\n</code></pre> <p>You will see that this expects <code>user_id</code> to be passed as part of the data. The easiest way to make this happen is to use jsPsych\u2019s handy data.addProperties method. Here is a code snippet from one of the template experiments:</p> <pre><code>async startExperiment() {\n  this.props.history.listen(jsPsych.endExperiment);\n\n  jsPsych.data.addProperties({user_id: this.props.userID}); //See https://www.jspsych.org/core_library/jspsych-data/#jspsychdataaddproperties\n</code></pre>"},{"location":"advanced/deploying/","title":"Deployment","text":"<p>Nobody can use your website if it isn't available on the web.</p> <ul> <li>Deploying to AWS<ul> <li>Deleting</li> </ul> </li> </ul>"},{"location":"advanced/deploying/awsDeletion/","title":"AWS Deletion","text":""},{"location":"advanced/deploying/awsDeletion/#skip-to-section","title":"Skip to section","text":"<ul> <li>using cli</li> <li>using AWS console</li> </ul>"},{"location":"advanced/deploying/awsDeletion/#cli","title":"CLI","text":"<p>The pushkin CLI will delete resources it was responsible for creating. Run:</p> <pre><code> pushkin aws armageddon\n</code></pre> <p>This will leave in place your IAM users, any database snapshots, and task definitions, but otherwise, everything is deleted INCLUDING YOUR DATA (unless you have snapshots), so use this with caution. </p> <p>When the program finishes running, it will list any deletable resources that were not successfully deleted. Sometimes, running <code>pushkin aws armageddon</code> more than once will remove the hold-outs. If not...</p>"},{"location":"advanced/deploying/awsDeletion/#console","title":"Console","text":"<p>The CLI does its best to remove things it was responsible for creating. However, if you are creating anything outside the CLI or if AWS changes how some things work, or if <code>pushkin aws init</code> crashes when running, the CLI may not be able to delete everything. In that case, you should use the AWS CLI:</p> <ol> <li> <p>Go to the RDS service. Click on \"DB Instances\". For each instance:</p> <p>A. Choose Modify.</p> <p>B. Scroll to the bottom and deselect <code>Enable deletion protection</code>.</p> <p>C. On the next page, choose to apply changes immediately.</p> <p>D. After saving, select the database again and choose Actions-&gt;Delete. If you want to save a snapshot of your database (including all data), go ahead and select that option. Otherwise, deselect. </p> </li> <li> <p>Go to the Cloudformation service. Select the stack, then choose 'delete'. </p> </li> <li> <p>Go to the ECS service. Click on your cluster. Then choose 'Delete Cluster'. </p> </li> <li> <p>Go to the EC2 service. Click on 'Load Balancers'. Select your load balancer (if more than one). Then choose Actions-&gt;Delete.</p> </li> <li> <p>Go to the Cloudfront service. Select your distribution. Choose 'Disable'. </p> </li> <li> <p>Wait a while (about 5 minutes). Once your distribution's state is displayed as 'Disabled', you can now select it and click 'Delete'. </p> </li> <li> <p>Go back to the EC2 service. Select 'Security Groups'. Select all the security groups EXCEPT the one named 'default' (and, if you are developing on an AWS EC2 instance, the security group(s) you created when setting that up). Then choose Actions-&gt;Delete. </p> </li> </ol> <p>You may be told you can't delete one of the security groups because it is still in use. That's probably because the databases haven't finished deleting. Check to see if that's the case (go back to RDS). If so, wait a while longer, then try again.</p> <p>Finally, go to the S3 service. Choose your s3 bucket(s) and click \"Delete\". </p> <p>At this point, you've deleted mostly everything. We have not deleted any database snapshots or backups. We did not delete SSL certificates or domain names, which you created during the initial deploy. We also didn't delete any ECS task definitions, because that does not appear to be possible. </p> <p>However, we have deleted everything that costs a significant amount of money or would interfere with re-deploying your pushkin site. Note that DB snapshots aren't free to store (they are cheap, though), and your domain name may be on auto-renewal. If you really want to get rid of everything, the best bet is to delete your account itself.</p>"},{"location":"advanced/experiment-structure/","title":"Experiment Component Structure","text":"<p>From the perspective of the web server, a Pushkin experiment involves a number of distinct elements. There is the HTML/Javascript for the stimulus display and response recording (the \u201cfront end\u201d). There is the database, where data are stored. There is the worker, which handles reading and writing from the database (plus potentially many other behind-the-scenes work!). Finally, there is the API, which communicates between the front end and the worker.</p> <p>For convenience, all the code is kept in the experiments folder as defined in <code>pushkin.yaml</code>. The CLI command prep automagically redistributes this code where it needs to go.</p> <ul> <li>Config File</li> <li>Experiment Web Page Component</li> <li>Recommended Structure</li> <li>Customizing the client</li> <li>Worker</li> <li>Migrations</li> <li>Seeds</li> </ul>"},{"location":"advanced/experiment-structure/experiment-config-files/","title":"Experiment Config.yaml Files","text":"<p>The config.yaml file provides information to the rest of Pushkin about the experiment. Below is a sample of what one might look like.</p> <pre><code>experimentName: &amp;fullName 'pushkintemplate Experiment'\nshortName: &amp;shortName 'pushkintemplate'\napiControllers:\n  - mountPath: *shortName\n    location: 'api controllers'\n    name: 'mycontroller'\nworker:\n  location: 'worker'\n  service:\n    image: *shortName\n    links:\n      - message-queue\n      - test_db\n    environment:\n      - \"AMQP_ADDRESS=amqp://message-queue:5672\"\n      - \"DB_USER=postgres\"\n      - \"DB_PASS=\"\n      - \"DB_URL=test_db\"\n      - \"DB_NAME=test_db\"\nwebPage:\n  location: 'web page'\nmigrations:\n  location: 'migrations'\nseeds:\n  location: 'seeds'\ndatabase: 'localtestdb'\nlogo: 'logo512.png'\ntext: 'Enter your experiment description here.'\ntagline: 'Be a citizen scientist! Try this quiz.'\nduration: ''\n</code></pre> <p>Each of the above fields is explained in detail below.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#experimentname","title":"experimentName","text":"<p>The full name of your experiment. This is used as a display name on the website to users.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#shortname","title":"shortName","text":"<p>This is a short, more computer-friendly version of your experiment\u2019s name. It should be unique as it is used as the folder name in the experiments folder.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#apicontrollers","title":"apiControllers","text":"<p>Note that this is an array. As many API controllers can be used as needed.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#mountpath","title":"mountPath","text":"<p>URL this controller\u2019s endpoint will be available at. The full path is /api/[mountPath].</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#location","title":"location","text":"<p>Path relative to config file the CLI will look for this module in.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#name","title":"name","text":"<p>Used in logs.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#worker","title":"worker","text":""},{"location":"advanced/experiment-structure/experiment-config-files/#location_1","title":"location","text":"<p>Path relative to config file the CLI will look for this module in.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#service","title":"service","text":"<p>This section is appended to Pushkin\u2019s core Docker Compose file. Note that message-queue is a requirement. If you\u2019re not using the local test database, test_db is not necessary. Database connections credentials should be unique to every user. The defaults are shown here for the testing database.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#webpage","title":"webPage","text":""},{"location":"advanced/experiment-structure/experiment-config-files/#location_2","title":"location","text":"<p>Path relative to config file the CLI will look for this module in.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#migrations","title":"migrations","text":""},{"location":"advanced/experiment-structure/experiment-config-files/#location_3","title":"location","text":"<p>Path relative to config file the CLI will look for these files.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#seeds","title":"seeds","text":""},{"location":"advanced/experiment-structure/experiment-config-files/#location_4","title":"location","text":"<p>Path relative to config file the CLI will look for these files. If you aren\u2019t seeding a database table, set this to <code>''</code>. Otherwise, if the folder pointed to by <code>location</code> is empty, database setup will fail.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#database","title":"database","text":"<p>A reference to a key defined in the core Pushkin config file. Experiments can share databases. The CLI will use this database to migrate and seed experiment data files. It is not used as connection information for any of the modules running the experiment, since these may or may not be inside containers and cannot use the same connection details as the CLI.</p>"},{"location":"advanced/experiment-structure/experiment-config-files/#logo-text-tagline-duration-other","title":"logo, text, tagline, duration, other","text":"<p>You may find it useful to include information about your experiment here that can be used by <code>front-end</code> to describe the experiment to potential subjects. For instance, the default pushkin site template uses:</p> <ul> <li><code>logo</code>: Image to be used as the logo for the experiment. The logo images should be stored in <code>pushkin/front-end/src/assets/images/quiz</code>.</li> <li><code>text</code>: The experiment description to be displayed for users to determine what quiz to play.</li> <li><code>tagline</code>: This is the description that shows when a quiz is shared via social media/email.</li> <li><code>duration</code>: The average length of the experiment to give users an idea of the time commitment.</li> </ul> <p>Note that no path is given for the logo because the default pushkin site template assumes this is in <code>front-end/src/img</code>.</p>"},{"location":"advanced/experiment-structure/experiment-web-page-component/","title":"Experiment Web Page Component","text":"<p>This houses the front-end component of an experiment. Dependencies are listed in the package.json file, which are packaged by the CLI and attached to the core website using the shortName defined by the experiment\u2019s config.yaml file. Pushkin uses React for the front end. Experiment web pages are mounted as React components and given the full size of the window under the header and navigation bar.</p>"},{"location":"advanced/experiment-structure/experiment-web-page-component/#recommended-structure","title":"Recommended Structure","text":"<p>At a minimum, the <code>web page/src</code> folder needs to contain an <code>index.js</code> file that includes all your experiment code. Technically, you don't even have to use jsPsych to implement your experiment. However, we recommend building on top of an experiment template. The <code>src</code> folder in experiment templates contains both <code>index.js</code> and <code>experiment.js</code> files. <code>experiment.js</code>, contains a function <code>createTimeline()</code>, within which you construct a jsPsych timeline just as you would for a standard jsPsych experiment; <code>createTimeline()</code> is then exported to <code>index.js</code>. The core functionality of interest is here:</p> <pre><code>  async startExperiment() {\n    this.setState({ experimentStarted: true });\n\n    await pushkin.connect(this.props.api);\n    await pushkin.prepExperimentRun(this.props.userID);\n\n    const jsPsych = initJsPsych({\n      display_element: document.getElementById('jsPsychTarget'),\n      on_finish: this.endExperiment.bind(this),\n      on_data_update: (data) =&gt; pushkin.saveStimulusResponse(data),\n    });\n\n    jsPsych.data.addProperties({user_id: this.props.userID}); //See https://www.jspsych.org/core_library/jspsych-data/#jspsychdataaddproperties\n\n    const timeline = createTimeline(jsPsych);\n\n    jsPsych.run(timeline);\n\n    document.getElementById('jsPsychTarget').focus();\n    this.setState({ loading: false });\n  }\n\n  async endExperiment() {\n    document.getElementById(\"jsPsychTarget\").innerHTML = \"Processing...\";\n    await pushkin.tabulateAndPostResults(this.props.userID, expConfig.experimentName)\n    document.getElementById(\"jsPsychTarget\").innerHTML = \"Thank you for participating!\";\n  }\n</code></pre> <p>A line of code worth noting is <code>on_data_update: (data) =&gt; pushkin.saveStimulusResponse(data)</code>. This uses a helper function from pushkin-client to save data each time the jsPsych on_data_update callback is triggered (i.e. at the end of each trial). Saving data after each trial is generally good practice, as opposed to sending all the data at the end of the experiment. You could write this behavior into the timeline itself, but this helper function saves some typing.</p> <p>Finally, when the timeline finishes, <code>endExperiment()</code> will be called. In the current experiment templates, this simply adds a \"Thank you for participating\" message. Current templates besides the basic template include some simple feedback which is specified inside the jsPsych timeline; however, one might have reasons for integrating more complex feedback into <code>endExperiment()</code>.</p>"},{"location":"advanced/experiment-structure/experiment-web-page-component/#assets","title":"Assets","text":"<p>The <code>assets</code> folder primarily contains static assets that will be imported by React. It also contains a folder called <code>timeline</code>, which holds assets which are needed inside the jsPsych timeline (e.g. audiovisual stimuli). The contents of the timeline assets folder get copied to the site's <code>pushkin/front-end/public/experiments/[experiment_name]</code> folder during <code>pushkin prep</code>. The reason this is necessary is that jsPsych timelines are not compiled by React, so the contents of the <code>assets</code> directory will not be accessible when jsPsych runs. However, create-react-app provides a nifty workaround: <code>process.env.PUBLIC_URL</code> will point to the folder <code>pushkin/front-end/public</code> during runtime.</p> <p>See here for an example of how to refer to audiovisual stimulus files within a jsPsych timeline.</p>"},{"location":"advanced/experiment-structure/experiment-web-page-component/#customizing-the-client","title":"Customizing the client","text":"<p>{ This section is a work in progress! }</p> <p>If you need to extend the client with custom API calls, etc., you should extend the defaultClient class. For instance, rather than loading the pushkin client directly:</p> <p>You would first extend it, adding any additional methods you need:</p>"},{"location":"advanced/experiment-structure/worker-component-migration-and-seed/","title":"Worker Component, Migration, and Seed","text":""},{"location":"advanced/experiment-structure/worker-component-migration-and-seed/#experiment-worker-component","title":"Experiment Worker Component","text":"<p>Workers handle the most complex aspect of a Pushkin experiment and different types of experiments could need workers with very different functionalities. Pushkin provides a simple template written in Javascript to start with.</p> <p>The job of a worker is to receive messages via RabbitMQ that (usually) come from an API controller. It looks up the appropriate information in the database and returns it to the requester. Workers are also the component that is responsible for implementing machine learning, as having direct access to this data allows it to make live, dynamic decisions during an experiment like what stimuli to serve next or predictions about a subject\u2019s next answers.</p>"},{"location":"advanced/experiment-structure/worker-component-migration-and-seed/#experiment-migrations","title":"Experiment Migrations","text":"<p>Pushkin uses knex to manage database tables. Files inside the migrations directory are migration files that describe how to set up and take down the tables needed for an experiment. The CLI handles the details of connecting to and executing the appropriate order of commands required to set up all experiment\u2019s tables. Once the table structure has been created, seeding is used to populate the database with experiment data, such as stimuli.</p> <p>When making a new experiment with new migrations, it is helpful to prefix the filenames with numbers in order to get the order right (you want tables that are going to be referenced by other tables to be created first, so giving them an alphabetically earlier filename is helpful).</p>"},{"location":"advanced/experiment-structure/worker-component-migration-and-seed/#experiment-seeds","title":"Experiment Seeds","text":"<p>Pushkin uses knex to facilitate moving data into an experiment\u2019s tables in a database. Files inside the seeds directory are seed files containing the data to be moved and directions on where to put it. Each experiment\u2019s seed files should align with the structure defined in its migration files. The CLI handles the execution of these files.</p>"},{"location":"advanced/modifying-experiment-templates/","title":"Using Experiment Templates","text":""},{"location":"advanced/modifying-experiment-templates/#skip-to-section","title":"Skip to section","text":"<ul> <li>Current templates</li> <li>General settings and editing content</li> <li>Adding additional jsPsych plugins</li> <li>Adding custom jsPsych plugins</li> </ul> <p>To install an experiment template, type in the following command, then select the desired template when prompted. Typically, you will want to select the most recent version. You also have the option to install templates that are not part of the official Pushkin distribution by using the \"path\" or \"url\" options.</p> <pre><code> pushkin install experiment\n</code></pre> <p>Over time, new site and experiment templates are likely to be added. If you want access to more recently released templates, update your CLI:</p> <pre><code> yarn global upgrade pushkin-cli\n</code></pre>"},{"location":"advanced/modifying-experiment-templates/#current-templates","title":"Current templates","text":"<ul> <li>Basic template - follow link to see a tutorial for adding an existing jsPsych experiment to a basic Pushkin template.</li> <li>Lexical decision template</li> <li>Grammaticality judgment template</li> <li>Self-paced reading template</li> </ul>"},{"location":"advanced/modifying-experiment-templates/#general-settings-and-editing-content","title":"General settings and editing content","text":"<p>Most Pushkin experiment templates will include the following files for editing the settings and content of your experiment. The basic experiment template is the exception, since it is a fairly bare bones template for customization.</p>"},{"location":"advanced/modifying-experiment-templates/#configjs","title":"config.js","text":"<p>This file contains some settings you can customize for the experiment. Currently, the default settings in every experiment template are:</p> <ul> <li>fontColor: Set the color for the experiment's font. This can be a web color name, a hex color code, or rgb setting. The default setting is \"black.\"</li> <li>fontSize: Set the font size.</li> <li>fontFamily: Set the font family. This accepts any font family universally available to web browsers.</li> </ul>"},{"location":"advanced/modifying-experiment-templates/#stimjs","title":"stim.js","text":"<p>Stimuli are added using the stim.js file, which contains an array to hold your stimulus information. More details on editing the stimuli for each specific experiment template are in their respective documentation pages.</p>"},{"location":"advanced/modifying-experiment-templates/#consentjs","title":"consent.js","text":"<p>Add text to this file that you want on your consent page.</p>"},{"location":"advanced/modifying-experiment-templates/#debriefjs","title":"debrief.js","text":"<p>Add text to this file for debrief information at the end of the experiment.</p>"},{"location":"advanced/modifying-experiment-templates/#adding-additional-jspsych-plugins","title":"Adding additional jsPsych plugins","text":"<p>The current experiment templates use only a few of jsPsych's official included plugins. Of course, for many experiments, you may want to use additional jsPsych plugins. After installing an experiment template, import the additional plugins at the top of your <code>experiment.js</code> file in the same way as the plugins already included in the template. For example, if your experiment also uses the survey-text and html-button-response plugins, you would add:</p> <pre><code>import jsPsychSurveyText from \"@jspsych/plugin-survey-text\";\nimport jsPsychHtmlButtonResponse from \"@jspsych/plugin-html-button-response\";\n</code></pre> <p>The next time you run <code>pushkin prep</code>, any additional jsPsych plugins you want to import will be automatically added as dependencies to your experiment's web page component (provided they are available via npm -- this does not apply to custom plugins). If, for some reason, you wish to add these dependencies yourself prior to running <code>prep</code>, navigate to the <code>web page</code> directory of the experiment using <code>cd</code> and run <code>yarn add</code> for each particular plugin:</p> <pre><code> cd 'experiments/[experiment_name]/web page'\n yarn add @jspsych/plugin-survey-text\n yarn add @jspsych/plugin-html-button-response\n</code></pre> <p>See Yarn's documentation for instructions regarding adding specific versions of a particular package.</p> <p>This same procedure will work with community-developed plugins available through npm via the jspsych-contrib repository. Just replace \"@jspsych\" with \"@jspsych-contrib\". The self-paced reading template uses a plugin from jspsych-contrib.</p>"},{"location":"advanced/modifying-experiment-templates/#adding-custom-jspsych-plugins","title":"Adding custom jsPsych plugins","text":"<p>The procedure above only works for jsPsych plugins available through npm. If your experiment makes use of a custom plugin, follow the steps below:</p> <ol> <li>Add the plugin file to the <code>web page/src</code> folder of the experiment</li> <li>Add the plugin towards the top of your experiment.js file like <code>import jsPsychMovingWindow from './jspsych-moving-window';</code></li> </ol>"},{"location":"advanced/modifying-experiment-templates/#adding-static-assets","title":"Adding static assets","text":"<p>The current experiment templates do not use any image, audio, or video stimuli. In order to reference static assets such as these in your jsPsych timeline, put them in the experiment's <code>web page/src/assets/timeline</code> folder. You can use whatever directory structure inside that folder you please, if, for instance, you want to keep audio files separate from images or divide assets from different experimental lists. When you run <code>pushkin prep</code>, the contents of the timeline assets folder will be copied to <code>pushkin/front-end/public/experiments/[experiment_name]</code>, where <code>[experiment_name]</code> is replaced with the same name as the folder within your site's experiments directory. The folder <code>pushkin/front-end/public</code> can be referenced at runtime using the environment variable <code>process.env.PUBLIC_URL</code>. Thus, when you refer to static assets in your jsPsych timeline, the reference should be as follows.</p> <p>Assume your experiment's <code>web page/src/assets/timeline</code> directory looks like this:</p> <pre><code>\u2514\u2500\u2500 timeline\n    \u251c\u2500\u2500 colors\n    \u2502   \u251c\u2500\u2500 blue.png\n    \u2502   \u2514\u2500\u2500 orange.png\n    \u251c\u2500\u2500 shapes\n    \u2502   \u251c\u2500\u2500 square.jpg\n    \u2502   \u2514\u2500\u2500 circle.jpg\n    \u251c\u2500\u2500 cat.mp4\n    \u2514\u2500\u2500 dog.mp4\n</code></pre> <p>Then references to these files in your experiment would look like:</p> <pre><code>var block_1_stimuli = [\n  { stimulus: process.env.PUBLIC_URL + \"/[experiment_name]/colors/blue.png\" },\n  { stimulus: process.env.PUBLIC_URL + \"/[experiment_name]/shapes/square.jpg\" },\n  { stimulus: process.env.PUBLIC_URL + \"/[experiment_name]/cat.mp4\" },\n];\n\nvar block_2_stimuli = [\n  { stimulus: process.env.PUBLIC_URL + \"/[experiment_name]/colors/orange.png\" },\n  { stimulus: process.env.PUBLIC_URL + \"/[experiment_name]/shapes/circle.jpg\" },\n  { stimulus: process.env.PUBLIC_URL + \"/[experiment_name]/dog.mp4\" },\n];\n</code></pre> <p>The other contents of <code>web page/src/assets</code> should be static assets that will be imported by React. The reason for this process of copying to the site's public folder is that jsPsych timelines are not compiled by React. By the time jsPsych runs, the files here are no longer accessible. While you could store timeline assets from the beginning in the site's public folder, keeping them in the experiment's timeline assets folder allows you to store all of a particular experiment's resources in the same place. Additionally, your experiment \u2014 along with all its multimedia stimuli \u2014 can now be distributed as a template.</p> <p>Note that <code>process.env.PUBLIC_URL</code> works for local development. Depending on how you deploy to the web, this environment variable may not be available.</p>"},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/","title":"Grammaticality judgment template","text":"<p>To install this experiment template, use the command <code>pushkin install experiment</code>, then select grammaticality.</p> <ul> <li>config info</li> <li>stim info</li> <li>Example: Customizing a grammaticality judgment experiment</li> </ul> <p></p>"},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/#configjs","title":"config.js","text":"<p>When correctiveFeedback is set to <code>true</code>: the two-alternative forced choice question will indicate if the participant's response was correct (in green font) or not (in red font). For the likert scale or slider, text indicating if the sentence was grammatical or ungrammatical will show. For all response types, when this is set to false, a fixation cross appears instead of corrective feedback.</p> <p>responseType: Set whether the response type is two-alternative forced choice (set to \"2afc\"), five-point likert scale (set to \"likert\"), or a slider from 0-100 (set to \"slider\").</p>"},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/#stimjs","title":"stim.js","text":"<p>sentence_grammatical: The grammatically correct sentence.</p> <p>sentence_ungrammatical: The grammatically incorrect sentence.</p>"},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/#example-customizing-a-grammaticality-judgment-experiment","title":"Example: Customizing a grammaticality judgment experiment","text":""},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/#finding-experiment-files-to-modify","title":"Finding experiment files to modify","text":"<p>If you have installed an experiment using the grammaticality judgment experiment template and called it <code>gram</code>, you should have a directory called <code>gram</code> in your experiments folder. This directory should be structured like this:</p> <pre><code>gram\n\u251c\u2500\u2500 api controllers\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 web page\n\u2514\u2500\u2500 worker\n</code></pre> <p>In order to customize your simple grammaticality judgment experiment, you will need to access two files, <code>config.js</code> and <code>stim.js</code>. These files can be found in <code>web page/src/</code>, a directory that looks like this:</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 consent.js\n\u251c\u2500\u2500 debrief.js\n\u251c\u2500\u2500 experiment.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 stim.js\n</code></pre>"},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/#modifying-the-experiment-configuration-and-stimuli-files","title":"Modifying the experiment configuration and stimuli files","text":""},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/#modifying-configjs","title":"Modifying <code>config.js</code>","text":"<p>This file controls the aesthetics of your experiment, including font color, font size, and font family. If you wanted to set the font color to <code>green</code>, set the font size to <code>24px</code>, and set the font family to a monospace font such as Courier New, you would modify <code>config.js</code> as follows:</p> <pre><code>// Custom stylin'\n\nvar experimentConfig = {\n    fontColor: \"green\",\n    fontSize: \"24px\",\n    fontFamily: \"'Courier New', Courier, monospace\",\n    correctiveFeedback: true\n    responseType: \u201c2afc\u201d\n}\n\nexport default experimentConfig;\n</code></pre> <p>You'll notice that <code>'Courier New'</code> is not <code>fontFamily</code>'s only specification. This is because it's important to list backup fonts in case your preferred font can't be loaded. You can read more about this practice here and see other CSS font combination ideas here.</p> <p>You'll also notice that <code>correctiveFeedback</code> is set to <code>true</code>. You can change this to <code>false</code> so that participants don't receive any feedback. Once you make this change, your <code>config.js</code> should look like this:</p> <pre><code>// Custom stylin'\n\nvar experimentConfig = {\n    fontColor: \"green\",\n    fontSize: \"24px\",\n    fontFamily: \"'Courier New', Courier, monospace\",\n    correctiveFeedback: false\n    responseType: \u201c2afc\u201d\n}\n\nexport default experimentConfig;\n</code></pre> <p>By default, <code>responseType</code> is set to <code>2afc</code>. You can change this to <code>likert</code> or <code>slider</code> to change the response type to a 5-item likert scale or a slider from 0-100. If you wanted to use a likert scale, your final <code>config.js</code> should look like this:</p> <pre><code>// Custom stylin'\n\nvar experimentConfig = {\n    fontColor: \"green\",\n    fontSize: \"24px\",\n    fontFamily: \"'Courier New', Courier, monospace\",\n    correctiveFeedback: false\n    responseType: \u201clikert\u201d\n}\n\nexport default experimentConfig;\n</code></pre> <p>You can run <code>pushkin prep</code> and <code>pushkin start</code> to see your changes.</p>"},{"location":"advanced/modifying-experiment-templates/grammaticality-judgement-template/#modifying-stimjs","title":"Modifying <code>stim.js</code>","text":"<p>This file controls the stimuli presented to participants. It specifies the sentences for each trial and denotes which is grammatical (sentence_grammatical) and which is not (sentence_ungrammatical).</p> <p>Say you have created the following table of stimuli for your experiment.</p> sentence_grammatical sentence_ungrammatical The frog is jumping. The frog are jumping. Where did she go? Where she did go? He went for a walk. He went a walk. This is an example. This an example. <p>In order to be able to use these stimuli in the grammaticality judgment experiment, you must use a table-to-JSON converter such as this one to format it correctly for jsPsych.</p> <p>Once it has been converted, paste the JSON into the <code>stim.js</code> file. You may need to manually add spaces, as the file should now look like this:</p> <pre><code>// Example stimuli\n\nconst stimArray = [\n  {\n    sentence_grammatical: \"The frog is jumping.\",\n    sentence_ungrammatical: \"The frog are jumping.\",\n  },\n  {\n    sentence_grammatical: \"Where did she go?\",\n    sentence_ungrammatical: \"Where she did go?\",\n  },\n  {\n    sentence_grammatical: \"He went for a walk.\",\n    sentence_ungrammatical: \"He went a walk.\",\n  },\n  {\n    sentence_grammatical: \"This is an example.\",\n    sentence_ungrammatical: \"This an example.\",\n  },\n];\n\nexport default stimArray;\n</code></pre> <p>Run <code>pushkin prep</code> and <code>pushkin start</code> again, and your experiment should be ready to go!</p>"},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/","title":"Lexical decision template","text":"<p>To install this experiment template, use the command <code>pushkin install experiment</code>, then select lexical.</p> <ul> <li>config info</li> <li>stim info</li> <li>Example: Customizing a lexical decision experiment</li> </ul> <p></p>"},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/#configjs","title":"config.js","text":"<p>When correctiveFeedback is set to <code>true</code>, the bounding box will change color based on the participant's response - green meaning correct, red meaning incorrect. If set to <code>false</code>, the box remains black.</p>"},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/#stimjs","title":"stim.js","text":"<p>word_1: Word displayed in the top of the fixation box</p> <p>word_2: Word displayed in the bottom of the fixation box</p> <p>both_words: If true, 'Y' is the correct answer (both word_1 and word_2 are real words). If false, 'N' is the correct answer (one or both of word_1 and word_2 are not real words)</p> <p>related: If true, the words are semantically related to each other (e.g. leaf and tree). If false, the words are unrelated (e.g. sock and tree).</p>"},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/#example-customizing-a-lexical-decision-experiment","title":"Example: Customizing a lexical decision experiment","text":""},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/#finding-experiment-files-to-modify","title":"Finding experiment files to modify","text":"<p>If you have installed an experiment using the lexical decision experiment template and called it <code>lex</code>, you should have a directory called <code>lex</code> in your experiments folder. This directory should be structured like this:</p> <pre><code>lex\n\u251c\u2500\u2500 api controllers\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 web page\n\u2514\u2500\u2500 worker\n</code></pre> <p>In order to customize your simple lexical decision experiment, you will need to access two files, <code>config.js</code> and <code>stim.js</code>. These files can be found in <code>web page/src/</code>, a directory that looks like this:</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 consent.js\n\u251c\u2500\u2500 debrief.js\n\u251c\u2500\u2500 experiment.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 stim.js\n</code></pre>"},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/#modifying-the-experiment-configuration-and-stimuli-files","title":"Modifying the experiment configuration and stimuli files","text":""},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/#modifying-configjs","title":"Modifying <code>config.js</code>","text":"<p>This file controls the aesthetics of your experiment, including font color, font size, and font family. If you wanted to set the font color to <code>red</code>, set the font size to <code>22px</code>, and set the font family to a monospace font such as Courier New, you would modify <code>config.js</code> as follows:</p> <pre><code>// Custom stylin'\n\nvar experimentConfig = {\n  fontColor: \"red\",\n  fontSize: \"22px\",\n  fontFamily: \"'Courier New', Courier, monospace\",\n  correctiveFeedback: true,\n};\n\nexport default experimentConfig;\n</code></pre> <p>You'll notice that <code>'Courier New'</code> is not <code>fontFamily</code>'s only specification. This is because it's important to list backup fonts in case your preferred font can't be loaded. You can read more about this practice here and see other CSS font combination ideas here. You'll also notice that <code>correctiveFeedback</code> is set to <code>true</code>. You can change this to <code>false</code> so that participants don't receive any feedback.</p> <p>After making any desired changes, run <code>pushkin prep</code> and <code>pushkin start</code> to see the updates.</p>"},{"location":"advanced/modifying-experiment-templates/lexical-decision-template/#modifying-stimjs","title":"Modifying <code>stim.js</code>","text":"<p>This file controls the stimuli presented to participants. It specifies (1) the two words presented on the screen (<code>word_1</code> and <code>word_2</code>), (2) whether both words are true words (<code>both_words</code>), and (3) whether the two words are related to each other (<code>related</code>).</p> <p>Say you have created the following table of stimuli for your experiment.</p> word_1 word_2 both_words related FLOWER PETAL true true BALL NET true true DOG LEASH true true COMB BRUSH true true BABY BEAN true false CAGE FERN true false DOG FLOUR true false GOAT SAND true false VASE VATE false false ARM ARL false false COAT COET false false HAIR HAIP false false HAME HAMA false false DAKE GRAKE false false CLEB CLED false false AFTY AFLY false false <p>In order to use these stimuli in the lexical decision experiment, you must use a table-to-JSON converter such as this one to format it correctly for jsPsych.</p> <p>Once it has been converted, paste the JSON into the <code>stim.js</code> file, which should now look like this:</p> <pre><code>// Example stimuli\n\nconst stimArray = [\n  { word_1: \"FLOWER\", word_2: \"PETAL\", both_words: true, related: true },\n  { word_1: \"BALL\", word_2: \"NET\", both_words: true, related: true },\n  { word_1: \"DOG\", word_2: \"LEASH\", both_words: true, related: true },\n  { word_1: \"COMB\", word_2: \"BRUSH\", both_words: true, related: true },\n  { word_1: \"BABY\", word_2: \"BEAN\", both_words: true, related: false },\n  { word_1: \"CAGE\", word_2: \"FERN\", both_words: true, related: false },\n  { word_1: \"DOG\", word_2: \"FLOUR\", both_words: true, related: false },\n  { word_1: \"GOAT\", word_2: \"SAND\", both_words: true, related: false },\n  { word_1: \"VASE\", word_2: \"VATE\", both_words: false, related: false },\n  { word_1: \"ARM\", word_2: \"ARL\", both_words: false, related: false },\n  { word_1: \"COAT\", word_2: \"COET\", both_words: false, related: false },\n  { word_1: \"HAIR\", word_2: \"HAIP\", both_words: false, related: false },\n  { word_1: \"HAME\", word_2: \"HAMA\", both_words: false, related: false },\n  { word_1: \"DAKE\", word_2: \"GRAKE\", both_words: false, related: false },\n  { word_1: \"CLEB\", word_2: \"CLED\", both_words: false, related: false },\n  { word_1: \"AFTY\", word_2: \"AFLY\", both_words: false, related: false },\n];\n\nexport default stimArray;\n</code></pre> <p>Run <code>pushkin prep</code> and <code>pushkin start</code> again, and your experiment should be ready to go!</p>"},{"location":"advanced/modifying-experiment-templates/self-paced-reading-template/","title":"Self-paced reading template","text":"<p>To install this experiment template, use the command <code>pushkin install experiment</code>, then select reading.</p> <ul> <li>config info</li> <li>stim info</li> <li>Example: Customizing a self-paced reading experiment</li> </ul> <p></p>"},{"location":"advanced/modifying-experiment-templates/self-paced-reading-template/#configjs","title":"config.js","text":"<p>comprehension: If <code>true</code>, each self-paced reading trial will be followed by a two-alternative forced-choice comprehension question. If <code>false</code>, the experiment goes right to the next self-paced reading trial.</p> <p>correctiveFeedback: If <code>true</code>, participants will get feedback after answering each comprehension question which indicates whether their response was correct or incorrect. If <code>false</code>, no feedback will follow the comprehension questions. This parameter has no effect if comprehension questions are not being displayed.</p>"},{"location":"advanced/modifying-experiment-templates/self-paced-reading-template/#stimjs","title":"stim.js","text":"<p>sentence: The sentence or text to be read. See above for details on how to note what chunks of words should be displayed together for a self-paced reading display rate.</p> <p>comprehension: An array containing the specifications for the comprehension questions. The first element is the question itself, the second is the correct answer, and the third is the incorrect answer. The correct and incorrect answers are randomly assigned to the 'F' and 'J' keys in experiment.js.</p>"},{"location":"advanced/modifying-experiment-templates/self-paced-reading-template/#example-customizing-a-self-paced-reading-experiment","title":"Example: Customizing a self-paced reading experiment","text":""},{"location":"advanced/modifying-experiment-templates/self-paced-reading-template/#finding-experiment-files-to-modify","title":"Finding experiment files to modify","text":"<p>If you have installed an experiment using the self-paced reading experiment template and called it <code>spr</code>, you should have a directory called <code>spr</code> in your experiments folder. This directory should be structured like this:</p> <pre><code>spr\n\u251c\u2500\u2500 api controllers\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 web page\n\u2514\u2500\u2500 worker\n</code></pre> <p>In order to customize your self-paced reading experiment, you will need to access two files, <code>config.js</code> and <code>stim.js</code>. These files can be found in <code>web page/src/</code>, a directory that looks like this:</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 consent.js\n\u251c\u2500\u2500 debrief.js\n\u251c\u2500\u2500 experiment.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 stim.js\n</code></pre>"},{"location":"advanced/modifying-experiment-templates/self-paced-reading-template/#modifying-configjs","title":"Modifying <code>config.js</code>","text":"<p>This file controls the aesthetics of your experiment, including font color, font size, and font family. If you wanted to set the font color to <code>blue</code>, set the font size to <code>36px</code>, and set the font family to a serif font such as Palatino Linotype, you would modify <code>config.js</code> as follows:</p> <pre><code>const experimentConfig = {\n  fontColor: \"blue\",\n  fontSize: \"36px\",\n  fontFamily: \"'Palatino Linotype', Palatino, serif\",\n  comprehension: true,\n  correctiveFeedback: true, // Only relevant if comprehension is set to true\n};\n\nexport default experimentConfig;\n</code></pre> <p>You'll notice that <code>'Palatino Linotype'</code> is not <code>fontFamily</code>'s only specification. This is because it's important to list backup fonts in case your preferred font can't be loaded. You can read more about this practice here and see other CSS font combination ideas here.</p> <p>Note that any font-related changes you make to <code>config.js</code> will not affect the font in the actual self-paced reading trials. To modify that font (and other plugin parameters), you will need to edit the trial in <code>experiment.js</code>. See the plugin documentation for details.</p> <p>You can run <code>pushkin prep</code> and <code>pushkin start</code> to see your changes.</p>"},{"location":"advanced/modifying-experiment-templates/self-paced-reading-template/#modifying-stimjs","title":"Modifying <code>stim.js</code>","text":"<p>This file controls the self-paced reading sentences and comprehension questions (if relevant) presented to participants. Create a new table of sentences and comprehension questions for your experiment, with your comprehension questions in a three-element array (i.e. ['question' , 'correct answer', 'incorrect answer']). Then use a table-to-JSON converter such as this one to format it correctly for jsPsych and paste the array into the <code>stim.js</code> file. Run <code>pushkin prep</code> and <code>pushkin start</code> again, and your experiment should be ready to go!</p>"},{"location":"advanced/modifying-site-template/","title":"Modifying Site Templates","text":"<p>The Pushkin CLI will allow you to test out new (or updated) site templates that you have on your local machine that have not yet been published to Github. When running <code>pushkin install site</code>, choose the option to provide a path. Paste in the absolute path to the root folder of the site template you are working on.</p> <p>Details on developing Pushkin site templates here:</p> <ul> <li>React Bootstrap</li> <li>Import Libraries</li> <li>Inline Styling</li> <li>Spacing</li> <li>LinkContainer</li> <li>Header and Footer</li> <li>Navbar logo</li> <li>Navbar Color Schemes</li> <li>Footer</li> <li>Home Page</li> <li>Add a Quiz</li> <li>Jumbotron</li> <li>CardDeck</li> <li>Card</li> <li>Findings Page</li> <li>Add a Findings Card</li> <li>CardGroup</li> <li>Align Card Vertically in CardGroup</li> <li>About Page</li> <li>Card Image Overlays</li> <li>Add a Team Member In About Page</li> <li>Feedback Page</li> </ul>"},{"location":"advanced/modifying-site-template/about-page/","title":"About Page","text":"<p>The About page is wrapped in a fluid <code>Container</code> component, which is a full-width container, spanning the entire width of the viewport.</p>"},{"location":"advanced/modifying-site-template/about-page/#card-image-overlays","title":"Card Image Overlays","text":"<p>The <code>&lt;Card.ImgOverlay&gt;</code> component turns an image into a card background and overlays your card\u2019s text:</p> <pre><code>&lt;Card className=\"bg-dark text-white\"&gt;\n  &lt;Card.Img src={require(\"../assets/images/aboutPage/AboutUs.jpeg\")} /&gt;\n  &lt;Card.ImgOverlay&gt;\n    &lt;Card.Title as=\"h1\" style={{marginTop:'12rem'}}&gt;\n      Who We Are\n    &lt;/Card.Title&gt;\n    &lt;Card.Text as=\"h4\" className=\"m-5\"&gt;\n      We do citizen science to learn how the the mind works.\n    &lt;/Card.Text&gt;\n    &lt;Card.Text as=\"h4\"&gt;\n      We are awesome scientists!\n    &lt;/Card.Text&gt;\n  &lt;/Card.ImgOverlay&gt;\n&lt;/Card&gt;\n</code></pre>"},{"location":"advanced/modifying-site-template/about-page/#add-a-team-member-in-about-page","title":"Add a Team Member In About Page","text":"<p>To add a team member to the About page, open <code>People.js</code> located in <code>components/TeamMember</code>, it should be an array of objects that look like this:</p> <pre><code>const people = [\n  {\n    name: 'Team Member Name',\n    image: 'Template.png',\n    description: 'Enter team member description here.'\n  },\n  {\n    name: 'Team Member Name',\n    image: 'Template.png',\n    description: 'Enter team member description here.'\n  },\n  {\n    name: 'Team Member Name',\n    image: 'Template.png',\n    description: 'Enter team member description here.'\n  },\n]\n</code></pre> <p>Each object contains three properties: name, image, and description. Edit the name and description properties in <code>People.js</code>.</p> <p>To add a profile picture of the team member. Copy the image file into the <code>assets/images/teamMember</code> folder.</p> <p>Then edit the image property in <code>People.js</code>, making sure the name of the image file and the image property here match, including the extension name, like: <code>bob.jpg</code>.</p>"},{"location":"advanced/modifying-site-template/feedback-page/","title":"Feedback Page","text":"<p>You can go to the feedback page by clicking the <code>HERE</code> button of  jumbotron in the home page or clicking the <code>Leave Feedback</code> button in the footer.</p> <p>To embed a Google form into the feedback page:</p> <ol> <li>Create your own google form</li> <li>Go to \u201cForm\u201d dropdown in the spreadsheet view, and click \u201cEmbed form in a webpage\u201d.</li> <li>This will give you an <code>&lt;iframe&gt;</code> snippet to place on the site template.</li> <li>Change the <code>src</code> attribute in <code>&lt;iframe&gt;</code> to your Google form link, it is located in <code>pushkin/front-end/src/pages/Feedback.js</code></li> </ol>"},{"location":"advanced/modifying-site-template/findings-page/","title":"Findings Page","text":""},{"location":"advanced/modifying-site-template/findings-page/#add-a-findings-card","title":"Add a Findings Card","text":"<p>To add a card to the findings page, open <code>FindingsData.js</code> located in <code>components/Findings</code>. You should see an array of objects that looks like this:</p> <pre><code>const findingsData = [\n  {\n    id: 1,\n    title: 'Finding 1',\n    image: 'stock1.jpeg',\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A scelerisque purus semper eget duis at tellus at. Ultrices sagittis orci a scelerisque purus. Aliquet eget sit amet tellus cras adipiscing enim. Lorem dolor sed viverra ipsum nunc aliquet. Sagittis orci a scelerisque purus semper. Pulvinar etiam non quam lacus suspendisse faucibus. Id porta nibh venenatis cras sed felis eget. Vitae sapien pellentesque habitant morbi tristique. Platea dictumst quisque sagittis purus sit amet volutpat. Pharetra et ultrices neque ornare aenean euismod elementum nisi quis. Nulla aliquet enim tortor at auctor urna nunc id cursus. Curabitur gravida arcu ac tortor dignissim.Habitasse platea dictumst quisque sagittis purus sit amet. Porttitor leo a diam sollicitudin tempor id eu nisl. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque habitant. Varius duis at consectetur lorem donec massa. Molestie nunc non blandit massa enim nec dui.',\n    link: true,\n    url: 'https://www.google.com/'\n  },\n  {\n    id: 2,\n    title: 'Finding 2',\n    image: 'stock2.jpeg',\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A scelerisque purus semper eget duis at tellus at. Ultrices sagittis orci a scelerisque purus. Aliquet eget sit amet tellus cras adipiscing enim. Lorem dolor sed viverra ipsum nunc aliquet. Sagittis orci a scelerisque purus semper. Pulvinar etiam non quam lacus suspendisse faucibus. Id porta nibh venenatis cras sed felis eget. Vitae sapien pellentesque habitant morbi tristique. Platea dictumst quisque sagittis purus sit amet volutpat. Pharetra et ultrices neque ornare aenean euismod elementum nisi quis. Nulla aliquet enim tortor at auctor urna nunc id cursus. Curabitur gravida arcu ac tortor dignissim.Habitasse platea dictumst quisque sagittis purus sit amet. Porttitor leo a diam sollicitudin tempor id eu nisl. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque habitant. Varius duis at consectetur lorem donec massa. Molestie nunc non blandit massa enim nec dui.',\n    link: false,\n    url: ''\n  },\n  {\n    id: 3,\n    title: 'Finding 3',\n    image: 'stock3.jpeg',\n    description:\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A scelerisque purus semper eget duis at tellus at. Ultrices sagittis orci a scelerisque purus. Aliquet eget sit amet tellus cras adipiscing enim. Lorem dolor sed viverra ipsum nunc aliquet. Sagittis orci a scelerisque purus semper. Pulvinar etiam non quam lacus suspendisse faucibus. Id porta nibh venenatis cras sed felis eget. Vitae sapien pellentesque habitant morbi tristique. Platea dictumst quisque sagittis purus sit amet volutpat. Pharetra et ultrices neque ornare aenean euismod elementum nisi quis. Nulla aliquet enim tortor at auctor urna nunc id cursus. Curabitur gravida arcu ac tortor dignissim.Habitasse platea dictumst quisque sagittis purus sit amet. Porttitor leo a diam sollicitudin tempor id eu nisl. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque habitant. Varius duis at consectetur lorem donec massa. Molestie nunc non blandit massa enim nec dui.',\n    link: false,\n    url: ''\n  }\n];\n</code></pre> <p>You can edit five of the properties: title, image, description, link, and url in each object, in order to change the content in each findings card. You can add more by copying and pasting from { through }, making sure that you have a comma after } any time there is another { following.</p> <p>To add an external link, set link property to <code>true</code> and fill the url property. Then a Read More button will appear on the findings card.</p>"},{"location":"advanced/modifying-site-template/findings-page/#cardgroup","title":"CardGroup","text":"<p>The <code>&lt;CardGroup&gt;</code> component renders cards as a single, attached element with equal width and height columns. We wrapped card components in <code>&lt;CardGroup&gt;</code> inside a <code>&lt;Container&gt;</code> in the findings page.</p>"},{"location":"advanced/modifying-site-template/findings-page/#align-card-vertically-in-cardgroup","title":"Align Card Vertically in CardGroup","text":"<p>Use two <code>&lt;Col&gt;</code> components wrapped in one <code>&lt;Row&gt;</code> inside cards:</p> <pre><code>&lt;Card&gt;\n  &lt;Row&gt;\n    &lt;Col&gt;\n      ...\n    &lt;/Col&gt;\n    &lt;Col&gt;\n      ...\n    &lt;/Col&gt;\n  &lt;/Row&gt;\n&lt;/Card&gt;\n</code></pre> <p>The content in the first <code>&lt;Col&gt;</code> will be on the left side of the card. And the content in the second <code>&lt;Col&gt;</code> will be on the right side of the card.</p> <p>For example, the first card in the findings page has its <code>&lt;Card.Img&gt;</code> in the first <code>&lt;Col&gt;</code>, <code>&lt;Card.Body&gt;</code>, <code>&lt;Card.Title&gt;</code>, <code>&lt;Card.Text&gt;</code> in the second <code>&lt;Col&gt;</code></p>"},{"location":"advanced/modifying-site-template/header-and-footer/","title":"Header and Footer","text":"<p>The <code>Header.js</code> and <code>Footer.js</code> components are located in <code>pushkin/front-end/src/components/Layout</code></p>"},{"location":"advanced/modifying-site-template/header-and-footer/#navbar-logo","title":"Navbar logo","text":"<p>To Change the logo in the navbar, copy your logo image into the <code>pushkin/front-end/src/assets/logo</code> folder, modify the path in <code>src={require(\"../../assets/images/logo/NavbarLogo.png\")}</code> in the <code>&lt;Navbar.Brand&gt;</code>. You can also modify the logo\u2019s size using the <code>width</code> and <code>height</code> attributes in the <code>&lt;img /&gt;</code> tag.</p>"},{"location":"advanced/modifying-site-template/header-and-footer/#navbar-color-schemes","title":"Navbar Color Schemes","text":"<p>Choose from <code>variant=\"light\"</code> for use with light background colors, <code>variant=\"dark\"</code> for dark background colors. Then, customize with the <code>bg</code> prop or any custom css! You can also use the <code>className</code> prop in the <code>&lt;Navbar&gt;</code> component, like <code>className=\"navbar-dark bg-dark\"</code></p>"},{"location":"advanced/modifying-site-template/header-and-footer/#footer","title":"Footer","text":"<p>The footer is wrapped in <code>&lt;Row&gt;</code> component. You can change the background color in the style prop: <code>style={{backgroundColor:'#eeeeee'}}</code>.</p>"},{"location":"advanced/modifying-site-template/home-page/","title":"Home Page","text":""},{"location":"advanced/modifying-site-template/home-page/#add-a-quiz","title":"Add a Quiz","text":"<p>To add a quiz, run <code>pushkin install experiment</code>. Select the experiment template of choice (see this list for the options). This will create a pushkin experiment template in the <code>experiments/</code> folder.</p> <p>Open the <code>config.js</code> located in your experiment folder, and modify the experiment name, shortName, logo, text, etc.</p> <pre><code>experimentName: &amp;fullName 'mind Experiment'\nshortName: &amp;shortName 'mind' # This should be unique as its used for urls, etc.\napiControllers: # The default export from each of these locations will be attached to a pushkin API\n  - mountPath: *shortName\n    location: 'api controllers'\n    name: 'mycontroller'\nworker:\n  location: 'worker'\n  service: # what to add as a service in main compose file\n    image: *shortName\n    links:\n      - message-queue\n      - test_db\n    environment:\n      - \"AMQP_ADDRESS=amqp://message-queue:5672\"\n      - \"DB_USER=postgres\"\n      - \"DB_PASS=\"\n      - \"DB_URL=test_db\"\n      - \"DB_NAME=test_db\"\nwebPage:\n  location: 'web page'\nmigrations:\n  location: 'migrations'\nseeds:\n  location: ''\n# Used for migration and seed commands via main CLI\n# Note that these might be different than those given to the worker,\n# Since it's running inside a linked docker container\ndatabase: 'localtestdb'\nlogo: 'Mind.png'\ntext: 'Enter your experiment description here'\ntagline: 'Be a citizen scientist! Try this quiz.'\nduration: ''\n</code></pre> <p>After running <code>pushkin prep</code>, the <code>experiments.js</code> located in <code>pushkin/front-end/src</code> will be updated, it should be an array of objects like this:</p> <pre><code>export default [\n  { fullName: 'vocab Experiment', shortName: 'vocab', module: pushkinComponent7e170301859545dab691a08652b798a8, logo: 'logo512.png', tagline: 'Be a citizen scientist! Try this quiz.', duration: '' },\n  { fullName: 'mind Experiment', shortName: 'mind', module: pushkinComponent1d77ca65c9f94dac834629611d452c8e, logo: 'logo512.png', tagline: 'Be a citizen scientist! Try this quiz.', duration: '' },\n  { fullName: 'whichenglish Experiment', shortName: 'whichenglish', module: pushkinComponentbbca5356917345c2b2532e84e5325197, logo: 'logo512.png', tagline: 'Be a citizen scientist! Try this quiz.', duration: '' },\n];\n</code></pre> <p>Then the new quiz card will be automatically added to the home page.</p>"},{"location":"advanced/modifying-site-template/home-page/#jumbotron","title":"Jumbotron","text":"<p>The Jumbotron is a lightweight, flexible component that can optionally extend the entire viewport to showcase key content on your site.</p> <pre><code>&lt;Jumbotron style={{backgroundColor:'#eeeeee'}}&gt;\n  &lt;div&gt;\n    We do &lt;strong&gt;citizen science&lt;/strong&gt; to learn how the mind\n    works.{' '}\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;strong&gt;\n      Pick a game to get started!\n    &lt;/strong&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mt-3\"&gt;\n    Feel free to send us feedback &lt;LinkContainer to=\"/feedback\"&gt;&lt;a&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;&lt;/LinkContainer&gt;\n  &lt;/div&gt;\n&lt;/Jumbotron&gt;\n</code></pre> <p>It includes a link to the feedback page and an anchor tag wrapped in <code>&lt;LinkContainer&gt;</code> component.</p>"},{"location":"advanced/modifying-site-template/home-page/#carddeck","title":"CardDeck","text":"<p>The <code>&lt;CardDeck&gt;</code> creates a grid of cards that are of equal height and width. The layout will automatically adjust as you insert more cards. We recommend putting every 3 cards in a card deck. Quizzes are wrapped in card decks in <code>Home.js</code> located in <code>pushkin/front-end/src/pages</code>.</p>"},{"location":"advanced/modifying-site-template/home-page/#card","title":"Card","text":"<p>Bootstrap\u2019s cards provides a flexible and extensible content container with multiple variants and options:</p> <ul> <li>Body: Use <code>&lt;Card.Body&gt;</code> to pad content inside a <code>&lt;Card&gt;</code>.</li> <li>Title, text, and links: Using <code>&lt;Card.Title&gt;</code>, <code>&lt;Card.Subtitle&gt;</code>, and <code>&lt;Card.Text&gt;</code> inside the <code>&lt;Card.Body&gt;</code> will line them up nicely. <code>&lt;Card.Link&gt;</code> are used to line up links next to each other.</li> <li>Images: Cards include a few options for working with images. Choose from appending \u201cimage caps\u201d at either end of a card, overlaying images with card content, or simply embedding the image in a card.</li> <li>Image clickable area styling: If you would like to use circular images and limit the clickable space to be circular, be sure to keep the <code>:hoverStyles.circleStyle</code> className in the <code>&lt;LinkContainer</code>. If you would like to use square or rectangular images, be sure to not include this className.</li> </ul> <p>For example, the quiz card in the home page:</p> <pre><code>&lt;Card className=\"border-0 shadow\" style={styles.card}&gt;\n  &lt;Card.Body&gt;\n    &lt;LinkContainer\n      // style={styles.cardButton}\n      to={'/quizzes/' + this.props.id}\n      className={css(hoverStyles.opacityStyle, hoverStyles.circleStyle)}\n    &gt;\n      &lt;Card.Img src={this.props.img} style={styles.cardImage} /&gt;\n    &lt;/LinkContainer&gt;\n    &lt;Card.Title className=\"mt-4\" style={styles.cardTitle}&gt;\n      {this.props.title}\n    &lt;/Card.Title&gt;\n    &lt;Card.Text className=\"mt-4\" style={styles.cardText}&gt;\n      {this.props.text}\n\n      {/* {this.props.duration &amp;&amp; (\n        &lt;p&gt;\n          {' '}\n          &lt;strong&gt;\n            {' '}\n            Average time: {this.props.duration} minutes.{' '}\n          &lt;/strong&gt;{' '}\n        &lt;/p&gt;\n      )}\n\n      {this.state.count &amp;&amp; (\n        &lt;p&gt; {this.state.count} players so far! &lt;/p&gt;\n      )} */}\n    &lt;/Card.Text&gt;\n  &lt;/Card.Body&gt;\n  &lt;Row className=\"justify-content-center mt-2\"&gt;\n    &lt;LinkContainer\n      // style={styles.cardButton}\n      to={'/quizzes/' + this.props.id}\n    &gt;\n      &lt;Button className={css(hoverStyles.cardButton)}&gt;Play Now&lt;/Button&gt;\n    &lt;/LinkContainer&gt;\n  &lt;/Row&gt;\n  &lt;Row className=\"justify-content-center mt-3 mb-3\"&gt;\n    &lt;i.SocialIcon\n      url={share.facebook}\n      onClick={e =&gt; {\n        e.preventDefault();\n        share.open(share.facebook);\n      }}\n      className={css(hoverStyles.socialIcon, hoverStyles.opacityStyle)}\n      target=\"_blank\"\n    /&gt;\n    &lt;i.SocialIcon\n      url={share.twitter}\n      onClick={e =&gt; {\n        e.preventDefault();\n        share.open(share.twitter);\n      }}\n      className={css(hoverStyles.socialIcon, hoverStyles.opacityStyle)}\n      target=\"_blank\"\n    /&gt;\n    &lt;i.SocialIcon\n      url={share.email}\n      className={css(hoverStyles.socialIcon, hoverStyles.opacityStyle)}\n      target=\"_blank\"\n    /&gt;\n    {/* BETA ribbon */}\n    {/* {this.props.beta &amp;&amp; (\n      &lt;LinkContainer to={'/quizzes/' + this.props.id}&gt;\n        &lt;div className={s.ribbon + ' ' + s.ribbonBottomLeft}&gt;\n          {' '}\n          &lt;span&gt;BETA&lt;/span&gt;{' '}\n        &lt;/div&gt;\n      &lt;/LinkContainer&gt;\n    )} */}\n  &lt;/Row&gt;\n&lt;/Card&gt;\n</code></pre> <p>The components inside a quiz card, in order from top to bottom, are:</p> <ul> <li><code>&lt;Card.Img&gt;</code>: Quiz cover image</li> <li><code>&lt;Card.Title&gt;</code>: Quiz name</li> <li><code>&lt;Card.Text&gt;</code>: Quiz description</li> <li><code>&lt;Button&gt;</code>: Wrapped in <code>&lt;LinkContainer&gt;</code></li> <li><code>&lt;SocialIcon&gt;</code>: The react social icons provides a set of beautiful svg social icons.</li> </ul>"},{"location":"advanced/modifying-site-template/react-bootstrap/","title":"React Bootstrap","text":"<p>The pushkin site template uses React-Bootstrap as its front-end UI library. It is a complete re-implementation of the Bootstrap components using React. It has no dependency on either bootstrap.js or jQuery.</p>"},{"location":"advanced/modifying-site-template/react-bootstrap/#import-libraries","title":"Import Libraries","text":"<p>You should import individual components like: <code>react-bootstrap/Button</code> rather than the entire library. Doing so pulls in only the specific components that you use, which can significantly reduce the amount of code you end up sending to the client:</p> <pre><code>import Button from 'react-bootstrap/Button';\n\n// or less ideally\nimport { Button } from 'react-bootstrap';\n</code></pre>"},{"location":"advanced/modifying-site-template/react-bootstrap/#inline-styling","title":"Inline Styling","text":"<p>In React, inline styles are not specified as a string. Instead, they are specified with an object whose key is the camelCased version of the style name, and whose value is the style\u2019s value, usually a string:</p> <pre><code>const styles = {\n  card: {\n    backgroundColor: '#B7E0F2',\n    borderRadius: 55\n  },\n  cardTitle: {\n    fontSize: 26,\n    fontWeight: 600\n  },\n  cardBody: {\n    padding: '2.5rem'\n  },\n  cardImage: {\n    width: '100%',\n    height: '15vw',\n    objectFit: 'cover',\n    borderRadius: 55\n  }\n}\n</code></pre> <p>React lets you add CSS inline, written as attributes and passed to elements:</p> <pre><code>&lt;Container className=\"p-0\" fluid style={styles.container}&gt;\n</code></pre>"},{"location":"advanced/modifying-site-template/react-bootstrap/#spacing","title":"Spacing","text":"<p>React Bootstrap spacing is a utility that assigns responsive margin or padding classes to elements to modify their display position.</p> <p>The classes are named using the format {property}{sides}-{size} for xs and {property}{sides}-{breakpoint}-{size} for sm, md, lg, and xl.</p> <p>Where property is one of:</p> <ul> <li>m - for classes that set margin</li> <li>p - for classes that set padding</li> </ul> <p>Where sides is one of:</p> <ul> <li>t - for classes that set margin-top or padding-top</li> <li>b - for classes that set margin-bottom or padding-bottom</li> <li>l - for classes that set margin-left or padding-left</li> <li>r - for classes that set margin-right or padding-right</li> <li>x - for classes that set both *-left and *-right</li> <li>y - for classes that set both *-top and *-bottom</li> <li>blank - for classes that set a margin or padding on all 4 sides of the element</li> </ul> <p>Where breakpoint is one of:</p> <ul> <li>sm</li> <li>md</li> <li>lg</li> <li>xl</li> </ul> <p>Where size is one of:</p> <ul> <li>0 - for classes that eliminate the margin or padding by setting it to 0</li> <li>1</li> <li>2</li> <li>3</li> <li>4</li> <li>5</li> </ul> <p>For example:</p> <pre><code>&lt;img className=\"ml-2 mr-2\" /&gt;\n</code></pre> <p>It means <code>marginLeft</code> is 2 and <code>marginRight</code> is 2 as well.</p> <pre><code>&lt;img className=\"m-4\" /&gt;\n</code></pre> <p>It means margins of all sides (left, right, top, bottom) are 4.</p>"},{"location":"advanced/modifying-site-template/react-bootstrap/#linkcontainer","title":"LinkContainer","text":"<p><code>&lt;LinkContainer&gt;</code> is a component of react-router-bootstrap. Wrap your React Bootstrap element in a <code>&lt;LinkContainer&gt;</code> to make it behave like a React Router <code>&lt;Link&gt;</code> <code>&lt;LinkContainer&gt;</code> accepts same parameters as React Router\u2019s <code>&lt;NavLink&gt;</code></p>"},{"location":"advanced/pushkin-api/","title":"pushkin-api","text":"<p><code>pushkin-api</code> comes with some convenience classes and functions that makes extending the API for a new experiment straightforward, It is split into two main parts:</p> <ul> <li>Controller Builder</li> <li>Core API</li> </ul>"},{"location":"advanced/pushkin-api/api-controller-builder/","title":"API Controller Builder","text":"<p>The controller builder is what most users will likely want to use for their experiment. It eases the creation of controllers that can be attached to a core Pushkin API. Below is a simple example of how to use it:</p> <pre><code>import pushkin from 'pushkin-api';\nconst myController = new pushkin.ControllerBuilder();\n\nconst db_read_queue = 'myexp_quiz_dbread';\nconst db_write_queue = 'myexp_quiz_dbwrite';\nconst task_queue = 'myexp_quiz_taskworker';\n\nmyController.setDefaultPasses(db_read_queue, db_write_queue, task_queue);\nmyController.setDirectUse('/status', (req, res, next) =&gt; res.send('up'), 'get');\nmyController.setPass('/forum/posts', 'getAllForumPosts', db_read_queue, 'get');\nmyController.setPass('/forum/posts/:postid', 'getForumPost', db_read_queue, 'get');\n\nmodule.exports = myController;\n</code></pre> <p>The first line imports the API and the second creates a controller builder. The queues refer to specific queues to send information on through RabbitMQ. Using separate queues allows general categorization of data. For example, in the case of a crash, the write queue is backed up so as to avoid loss of research data during times of high traffic. The controller must be exported when done being modified so it can be required by the core API.</p> <p>The API layer of a Pushkin project has two main jobs. The first job is taking the Request sent from the client, and the second job is sending the request to the message queue. So developers don\u2019t need to implement too many details about their experiments logics in API layer. All they need to do are designing the endpoints and assigning the message queues. So Pushkin-API provides some useful methods, which will simplify the operation of the developer\u2019s job.</p> <p>For example, developers can use <code>setPass()</code> method to assign which HTTP request to which message queue by giving some simple arguments. They can also use <code>setDirectUse()</code> if there is no need to use the rpc and message queue in their controller design. Pushkin also provides a quite useful method <code>setDefaultPasses()</code> to provide a typical controller design of experiments, which only need some message queue arguments.</p>"},{"location":"advanced/pushkin-api/api-controller-builder/#setpass","title":"setPass","text":"<p>Arguments:</p> <ul> <li>route : string</li> </ul> <p>The API endpoint that this pass applies to.</p> <ul> <li>rpcMethod : string</li> </ul> <p>What method to request the worker to perform.</p> <ul> <li>queue : string</li> </ul> <p>The RabbitMQ queue via which to send this pass.</p> <ul> <li>httpMethod : string</li> </ul> <p>The http method this endpoint will listen on.</p> <p>Returns: None</p> <p>When an <code>httpmethod</code> is send to <code>/api/myexp/controllermountpath/route</code>, send an RPC call of <code>rpcMethod</code> through <code>queue</code> to a worker listening on the backend. This makes is easy for worker methods to be mapped to API endpoint URLS. When attached to a core API, this controller endpoint returns the data sent back by the worker to the client.</p>"},{"location":"advanced/pushkin-api/api-controller-builder/#setdefaultpasses","title":"setDefaultPasses","text":"<p>Arguments:</p> <ul> <li>read queue : string</li> </ul> <p>Name of RabbitMQ read queue to use. Not persistent.</p> <ul> <li>write queue : string</li> </ul> <p>Name of RabbitMQ write queue to use. Persistent.</p> <ul> <li>task queue : string</li> </ul> <p>Name of RabbitMQ task queue to use. Not persistent.</p> <p>Returns: None</p> <p>Enable the default endpoints a simple experiment would use. This makes it possible to use the default Pushkin Client calls. The default endpoints are</p> <ul> <li>\u2018/startExperiment\u2019, \u2018startExperiment\u2019, taskQueue, \u2018post\u2019</li> <li>\u2018/getStimuli\u2019, \u2018getStimuli\u2019, readQueue, \u2018post\u2019</li> <li>\u2018/metaResponse\u2019, \u2018insertMetaResponse\u2019, writeQueue, \u2018post\u2019</li> <li>\u2018/stimulusResponse\u2019, \u2018insertStimulusResponse\u2019, writeQueue, \u2018post\u2019</li> <li>\u2018/endExperiment\u2019, \u2018endExperiment\u2019, taskQueue, \u2018post\u2019</li> </ul>"},{"location":"advanced/pushkin-api/api-controller-builder/#setdirectuse","title":"setDirectUse","text":"<p>Arguments:</p> <ul> <li>route : string</li> </ul> <p>The API endpoint that this use applies to.</p> <ul> <li>handler : function</li> </ul> <p>Function to call when this endpoint is hit.</p> <ul> <li>httpMethod : string</li> </ul> <p>The http method this endpoint will listen on.</p> <p>Returns: None</p> <p>Applies this function to an API endpoint. The handler function is directly attached to an Express Router and should therefore take three arguments for the request, response, and next paramaters respectively.</p>"},{"location":"advanced/pushkin-api/api-controller-builder/#getconnfunction","title":"getConnFunction","text":"<p>Arguments: None</p> <p>Returns: A function that takes a connection obj as the argument and will return a router/controller. This is the API of pushkin to handle the request to the current endpoint. The returned router/controller will be used as the <code>callback</code> argument of the <code>app.use([path,] callback [, callback...])</code></p> <p>Use this methods to get the function and take a message queue connection as the argument, then you can get the returned controller, which can be used as the argument of <code>useController</code> method in``Core API`` section. This method is usually used in Core-API part, <code>usePushkinController</code> method. When it gets the Pushkin controller, call this function with a message queue connection to finally get the Express router/controller.</p>"},{"location":"advanced/pushkin-api/core-api/","title":"Core API","text":"<p>The Core API provides some methods which Pushkin can use to load users\u2019s controllers. It will initilize the controllers and the connections with message queues, set up multiple middlewares, and start the server. The Core API of Pushkin works like this:</p> <pre><code>import pushkin from 'pushkin-api';\n\nconst port = 3000;\nconst amqpAddress = 'amqp://localhost:5672';\n\nconst api = new pushkin.API(port, amqpAddress);\n\napi.init()\n     .then(() =&gt; {\n             const controllersFile = path.join(__dirname, 'controllers.json');\n             const controllers = JSON.parse(fs.readFileSync(controllersFile));\n             controllers.forEach(controller =&gt; {\n                     const mountPath = path.join('/api/', controller.mountPath);\n                     const contrModule = require(controller.name);\n                     console.log(contrModule);\n                     api.usePushkinController(mountPath, contrModule);\n             });\n             api.start();\n     })\n     .catch(console.error);\n</code></pre> <p>The first line imports the API and the following three create an api. After executing <code>api.init()</code>, the message queue will be connected and if it succeeds, the Promise it returned will be resolved and the controllers that users build will be loaded and used as the middleware by the Express App. Finally when the <code>start()``method is called, the Express App will listen to the given port, and the server starts. The port is default to ``3000</code> and the amqpAddress is default to <code>amqp://localhost:5672</code>.</p> <p>The Core-API part\u2018s main jobs are taking the controllers the developers build, using it in Express App, and starting the server. The processes are quite standardized. When developers finish their design of controllers, they can require the controllers as modules then use <code>usePushkinController()</code> method to actually use the controllers in their server. Pushkin will take charge of packaging the custom experiments.</p>"},{"location":"advanced/pushkin-api/core-api/#init","title":"init","text":"<p>Arguments: None</p> <p>Returns: Promise, in which the connection to message queue is built. Once the connection succeeds, the Promise will be resolved and developers can define what to do next.</p>"},{"location":"advanced/pushkin-api/core-api/#usecontroller","title":"useController","text":"<p>Arguments:</p> <ul> <li>route : string</li> </ul> <p>The API endpoint that this use applies to.</p> <ul> <li>controller : express.router</li> </ul> <p>The middleware function that can be used by Express App to handle the HTTP request.</p> <p>Returns: None</p> <p>An encapsulated method of Express app.use(route, controller). Use it to add controller/request handling method to certain endpoint.</p>"},{"location":"advanced/pushkin-api/core-api/#usepushkincontroller","title":"usePushkinController","text":"<p>Arguments:</p> <ul> <li>route : string</li> </ul> <p>The API endpoint that this use applies to.</p> <ul> <li>pushkinController : ControllerBuilder</li> </ul> <p>The controller created by users using Controller Builder. After users build their custom controllers in their experiments, the pushkin will package them under the <code>pushkin prep</code> command.</p> <p>Returns: None</p> <p>The Pushkin will package the experiments that users develop and move it to <code>./pushkin</code>. For the API part, the pushkin will load and require the experiment\u2019s controllers. With this method, the Pushkin-API will nest the Express router app for this experiment at the route /api/[exp], where [exp] is the path for the experiment in question.</p>"},{"location":"advanced/pushkin-api/core-api/#start","title":"start","text":"<p>Arguments: None</p> <p>Returns: None</p> <p>Start the server and listen to the given port.</p>"},{"location":"developers/developing-with-pushkin/","title":"Developing with Pushkin","text":"<p>Pushkin is 100% open-source. We love it when people come together to help fix bugs, build features, and make Pushkin better for everyone. If you\u2019d like to contribute, feel free to open a pull request. The Pushkin project is split into several repos, each corresponding to a Yarn/NPM module. Issues and general project direction is tracked via GitHub\u2019s project boards and issues. The discussion board can be found in the pushkin repo which contains the documentation.</p> <ol> <li>CLI (Docs) Installable via Yarn. Adds a <code>pushkin</code> command to the path when installed globally and makes working with Pushkin much easier.</li> <li>Client (Docs) A module that provides simplified methods for making calls to a Pushkin API and unpacking data sent back from a worker. Note that built-in functions assume the API has corresponding default routes enabled to handle such requests.</li> <li>API (Docs) Essentially a mini-server designed with the use case of interfacing between Pushkin Client and Pushkin Worker via RabbitMQ.</li> <li>Worker (Docs) Receives messages from RabbitMQ and runs whatever functionality it\u2019s told to run, sending the result back through the queue it came from. Designed to be on the receiving end of a Pushkin API. Comes with built-in simple functions that most users will probably want, like \u201cgetAllStimuli\u201d.</li> </ol>"},{"location":"developers/getting-started-on-development/","title":"Getting Started on Development","text":""},{"location":"developers/getting-started-on-development/#understanding-the-front-end","title":"Understanding the Front End","text":"<ol> <li>Basics. You\u2019ll want a reasonably thorough grounding in Javascript and React. The tutorials in Code Academy are pretty good, though not free.</li> <li>Pushkin is a Single Page Application (SPA) based on React. For a gentle introduction to this stack, read this tutorial, which also describes incorporating authentication with auth0. Note that this tutorial is slightly out of date in that auth0 now uses auth0-spa-js for SPAs, and create-react-app suggests using function components rather than class components.</li> <li>To fill in your understanding of React, we recommend the two-part Codecademy.com Learn ReactJS course.</li> <li>Next, you probably want to learn more about routing using React-Router. We use v5, which is nearly identical to v4. If you read up on React Router, you\u2019ll see a lot of discussion of dynamic routing, though you can probably safely ignore this. One of the better tutorials available is here, though it\u2019s a bit short.</li> <li>You\u2019ll also want to understand Redux better. Redux is used to keep track of application-level state variables. For Pushkin, a primary use case is keeping track of subject IDs. The best tutorial we\u2019ve found for React-Redux is the official one. Note that it\u2019s a little out-of-date with regards to the use of object spread syntax (which is now supported by Node) and with how to handle asynchronous requests: we\u2019ll be using redux sagas for that, so read up on that as well. A good place to start on why redux sagas are worth using is here.</li> <li>At this point, we recommend going back through the tutorial in #2 above.</li> </ol>"},{"location":"developers/getting-started-on-development/#understanding-docker","title":"Understanding Docker","text":"<p>There are a number of tutorials on Docker. For ongoing use, this cheatsheet is pretty useful.</p>"},{"location":"developers/getting-started-on-development/#testing-pushkin-modules-locally","title":"Testing Pushkin Modules Locally","text":""},{"location":"developers/getting-started-on-development/#using-jest-tests","title":"Using Jest tests","text":"<p>For information on running tests with Jest, see Testing Pushkin with Jest</p> <p>The content on this page may be out of date - stay tuned for edits!</p> <p>Currently, the most convenient way to test new versions of Pushkin modules locally is to get the tarball of the pushkin modules you modified and put it into the node test project folder.</p> <ol> <li>If you have a node project for testing the new version of Pushkin modules (pushkin-api, pushkin-client, pushkin-worker, etc.), create a folder in the project dir named \u201ctestPackages\u201d.</li> <li>Get the tarball of the pushkin modules to be tested, like \u201cpushkin-api-1.2.0.tgz\u201d. Put this tarball into the testPackages folder.</li> <li>Modify the package.json file in the project dir like this:</li> </ol> <pre><code>\"dependencies\": {\n    \"pushkin-api\": \"file:testPackages/pushkin-api-1.2.0.tgz\",\n    ... ...\n    }\n</code></pre> <p>That is, modify the path of the Pushkin module to the local test version so that Yarn will find it locally rather than in the npm repository.</p> <p>After you <code>yarn add</code> all of the dependencies, you can write the test codes.</p>"},{"location":"developers/getting-started-on-development/#yalc-for-pushkin-worker-pushkin-api-and-pushkin-client","title":"yalc for pushkin-worker, pushkin-api, and pushkin-client","text":"<p>If you are working on any of the utility packages (pushkin-worker, pushkin-api, or pushkin-client), trying out your new code is not straightforward. These packages are included in the experiments and sites via npm. Normally, that means you can only include published versions. We can get around this using <code>yalc</code>. You've probably already installed yalc if you've followed the Pushkin installation instructions. If not, install yalc:</p> <pre><code>yarn global add yalc\n</code></pre> <p>(Note that for those familiar with using <code>npm link</code>, that won't work here because we use a Docker environment to test sites. Supposedly there is a way to hack Docker compatibility into your usage of npm link, but it seems too complex relative to the solution here.)</p>"},{"location":"developers/getting-started-on-development/#yalc-for-pushkin-worker","title":"yalc for pushkin-worker","text":"<p>If you're testing out a new version of pushkin-worker, you should have a directory with the dev version of pushkin-worker, a directory with a pushkin site you are working on, and an experiment in your site's experiments directory for which you want to try out the dev version of pushkin-worker.</p> <ol> <li>Go to the root directory of your dev version of pushkin-worker.</li> <li>Assuming you've cloned pushkin-worker from GitHub, it won't have any dependencies installed, so you'll need to run <code>yarn install; yarn build</code>.</li> <li>Run <code>yalc publish</code> to create a locally published version of pushkin-worker.</li> <li>Go to the <code>worker</code> directory within the experiment folder. Typically this will be [project root]/experiments/[experiment name]/worker.</li> <li>Run <code>yalc add pushkin-worker</code> to add your locally published version of pushkin-worker as a dependency.</li> <li>Open the package.json file in that same directory and add a property <code>\"files\"</code> with a value <code>[\"build/*\", \".yalc\"]</code> like such:</li> </ol> <pre><code>    \"files\": [\n        \"build/*\",\n        \".yalc\"\n    ],\n</code></pre> <p>(Note this has not been tested yet, so the array of files might need to be modified, e.g. <code>[\".yalc\"]</code>)</p> <ol> <li>Open the Dockerfile in that same directory and edit it to copy yalc files:</li> </ol> <pre><code>COPY .yalc /usr/src/app/.yalc/\nCOPY ./yalc.lock /usr/src/app/\n</code></pre> <p>These lines need to come before the WORKDIR is changed. So for example:</p> <pre><code>FROM node:20.2\nCOPY Dockerfile index.js package.json start.sh yarn.lock /usr/src/app/\nCOPY .yalc /usr/src/app/.yalc/\nCOPY ./yalc.lock /usr/src/app/\nWORKDIR /usr/src/app\nRUN yarn install --production\nRUN apt-get update &amp;&amp; apt-get install -qy netcat\nEXPOSE 8000\nCMD [\"bash\",\"start.sh\"]\n</code></pre> <p>(This final step is pretty well explained in the yalc README)</p> <p>Now you should be able to run <code>pushkin prep</code> and <code>pushkin start</code>. When you make changes to pushkin-worker, you'll need to:</p> <ol> <li>Go to the root directory of your dev version of pushkin-worker.</li> <li>Run <code>yarn build; yalc push</code>. <code>yalc push</code> will update your locally published version of pushkin-worker and push the changes wherever the package is being used.</li> </ol>"},{"location":"developers/getting-started-on-development/#yalc-for-pushkin-api","title":"yalc for pushkin-api","text":"<p>If you're testing out a new version of pushkin-api, you should have a directory with the dev version of pushkin-api, a directory with a pushkin site you are working on, and at least one experiment in your site's experiments directory.</p> <ol> <li>Go to the root directory of your dev version of pushkin-api.</li> <li>Assuming you've cloned pushkin-api from GitHub, it won't have any dependencies installed, so you'll need to run <code>yarn install; yarn build</code>.</li> <li>Run <code>yalc publish</code> to create a locally published version of pushkin-api.</li> <li>Go to the pushkin/api directory of your site.</li> <li>Run <code>yalc add pushkin-api</code> to add your locally published version of pushkin-api as a dependency.</li> <li>Go to the 'experiments/[experiment name]/api controllers' directory.</li> <li>Again run <code>yalc add pushkin-api</code>.</li> <li>Open the package.json file in that same directory.</li> <li>You should see it has a property <code>\"files\"</code> with a value <code>[\"build/*\"]</code>. Add <code>\".yalc\"</code> to the list of files like such:</li> </ol> <pre><code>    \"files\": [\n        \"build/*\",\n        \".yalc\"\n    ],\n</code></pre> <ol> <li>You'll need to repeat steps 6 through 9 for each experiment in your site's experiments directory.</li> </ol> <p>Now you should be able to run <code>pushkin prep</code> and <code>pushkin start</code>. When you make changes to pushkin-api, you'll need to:</p> <ol> <li>Go to the root directory of your dev version of pushkin-api.</li> <li>Run <code>yarn build; yalc push</code>. <code>yalc push</code> will update your locally published version of pushkin-api and push the changes wherever the package is being used. This saves you the hassle of running <code>yalc update</code> in the multiple directories in which you ran <code>yalc add</code>.</li> </ol>"},{"location":"developers/getting-started-on-development/#yalc-for-pushkin-client","title":"yalc for pushkin-client","text":"<p>If you're testing out a new version of pushkin-client, you should have a directory with the dev version of pushkin-client, a directory with a pushkin site you are working on, and at least one experiment in your site's experiments directory.</p> <ol> <li>Go to the root directory of your dev version of pushkin-client.</li> <li>Assuming you've cloned pushkin-client from GitHub, it won't have any dependencies installed, so you'll need to run <code>yarn install; yarn build</code>.</li> <li>Run <code>yalc publish</code> to create a locally published version of pushkin-client.</li> <li>Go to the pushkin/front-end directory of your site.</li> <li>Run <code>yalc add pushkin-client</code> to add your locally published version of pushkin-client as a dependency.</li> <li>Go to the 'experiments/[experiment name]/web page' directory.</li> <li>Again run <code>yalc add pushkin-client</code>.</li> <li>Open the package.json file in that same directory.</li> <li>You should see it has a property <code>\"files\"</code> with a value <code>[\"build/*\"]</code>. Add <code>\".yalc\"</code> to the list of files like such:</li> </ol> <pre><code>    \"files\": [\n        \"build/*\",\n        \".yalc\"\n    ],\n</code></pre> <ol> <li>You'll need to repeat steps 6 through 9 for each experiment in your site's experiments directory.</li> </ol> <p>Now you should be able to run <code>pushkin prep</code> and <code>pushkin start</code>. When you make changes to pushkin-client, you'll need to:</p> <ol> <li>Go to the root directory of your dev version of pushkin-client.</li> <li>Run <code>yarn build; yalc push</code>. <code>yalc push</code> will update your locally published version of pushkin-client and push the changes wherever the package is being used. This saves you the hassle of running <code>yalc update</code> in the multiple directories in which you ran <code>yalc add</code>.</li> </ol>"},{"location":"developers/overview-of-tech/","title":"Overview of Technologies","text":""},{"location":"developers/overview-of-tech/#front-end","title":"Front-end","text":"<ul> <li>HTML - A basic building block of websites, most HTML in the Pushkin site lives in conjunction with React tags.</li> <li>CSS - How stylings for websites are often declared. Pushkin currently uses a combination of CSS and JS to set the stylings.</li> <li>JavaScript - A basic building block for website functionality. JavaScript is crucial to the Pushkin structure and is the basis of many of the other building blocks, such as React and Node.</li> <li>React - A JavaScript-based library for building interactive user interfaces and Single-Page Applications (SPA)</li> <li>React-Router - Handles navigation components for setting your page URLs in your SPA.</li> <li>Aphrodite - Adds JavaScript-based styling (to update CSS) for React components. Currently, this is used to customize hover styling for the QUizTile icons and buttons but can be imported into other components to add more control over the styling via JavaScript.</li> <li>Redux - State container for JS Apps. In the case of Pushkin, we use React-Redux to track state changes within the Pushkin SPA)</li> <li>Bootstrap - A framework for building responsive websites that adapt across devices. This includes features like navigation bars and buttons that easily adapt to different window dimensions. In the case of Pushkin, we use React-Bootstrap, which integrates Bootstrap styling into the React SPA.</li> </ul>"},{"location":"developers/overview-of-tech/#back-end-and-databases","title":"Back-end and Databases","text":"<ul> <li>Node - The language of the backend. This is used to set up the APIs, set up the server for the site, and more.</li> <li>SQL - Used to manage the site databases, such as user information and experiment data. Pushkin is designed to use PostgreSQL.</li> <li>Knex - A SQL query builder for building, updating, and interacting with the database(s).</li> <li>RabbitMQ - A message broker for validation and routing. Routes messages from the API controller for the worker to receive.</li> </ul>"},{"location":"developers/overview-of-tech/#other","title":"Other","text":"<ul> <li>Docker - A platform for developing, shipping, and running applications. Used for running locally and deploying.</li> <li>Babel - This compiles the JavaScript used in the Pushkin project to ensure browser compatibility. This means having the ability to use modern JavaScript without losing accessibility for visitors on older browsers.</li> <li>Auth0 - The service used for authorization to enable logins for site visitors.</li> <li>Jest - JavaScript testing framework - this dependency is built into Pushkin for users to build their own site testing.</li> </ul>"},{"location":"developers/working-with-templates/","title":"Working with Templates","text":""},{"location":"developers/working-with-templates/#publishing-a-template","title":"Publishing a template","text":"<p>The Pushkin CLI <code>install</code> command is integrated with the GitHub release functionality. On the GitHub website, there is a <code>releases</code> panel on the right-hand side of the repo homepage.</p> <p></p> <p>Click on the panel to open the releases page. Then select <code>draft new release</code>.</p> <p></p> <p>The Pushkin CLI assumes semantic versioning. You will need to create a tag for your release of the form <code>vX.Y.Z</code>. GitHub has a reasonable explanation on this page (see right-hand side).</p> <p></p> <p>You can choose whatever title you want. We suggest you include an informative description of this particular release. If it's the first release for your project, you might just put in the description \"initial release\". This is up to you.</p> <p>What is critical is that you zip up the files in your repo into a file called <code>Archive.zip</code>. Do NOT zip up the whole folder, but rather the files inside. This is what the Pushkin CLI expects. Moreover, on a Mac, at least, this will ensure that hidden files and folders are not included.</p> <p></p> <p>On the <code>draft new release</code> page, you should see the option to <code>attach binaries by dropping them here or selecting them</code>. Use that option to upload <code>Archive.zip</code>.</p> <p></p> <p>Then click <code>publish release</code> and you are done.</p>"},{"location":"developers/working-with-templates/#using-a-self-published-template","title":"Using a self-published template","text":"<p>Run <code>pushkin install site</code> or <code>pushkin install experiment</code>, depending on which sort of template you are using. When asked where to install from, choose <code>url</code>. The URL is just the URL for your repo, with <code>/releases</code> added to the end:</p> <p><code>https://github.com/pushkin-consortium/pushkin-sitetemplate-basic/releases</code></p> <p>If you've followed the instructions in the previous section correctly, and if your template meets the requirements of the Pushkin CLI, this should work.</p>"},{"location":"developers/working-with-templates/#adding-your-template-to-the-official-pushkin-distribution","title":"Adding your template to the official Pushkin distribution.","text":"<p>If you haven't already, fork <code>pushkin-cli</code>. If you are adding a site template, you will want to modify the file <code>pushkin-cli/src/commands/sites/templates.js</code>:</p> <pre><code>export const templates = {\n   'default':'https://api.github.com/repos/pushkin-consortium/pushkin-sitetemplates-default/releases'\n};\n</code></pre> <p>Add your template to the <code>templates</code> object, setting the value to the API URL. This is the one described in the previous section, but where the domain is <code>api.github.com</code> instead of just <code>github.com</code>, and <code>repos/</code> is inserted before the repo name.</p> <pre><code>export const templates = {\n   'default':'https://api.github.com/repos/pushkin-consortium/pushkin-sitetemplates-default/releases',\n   'basic':  'https://api.github.com/repos/pushkin-consortium/pushkin-sitetemplate-basic/releases'\n};\n</code></pre> <p>For experiment templates, the process is analogous, but the file is in <code>pushkin-cli/src/commands/experiments/templates.js</code>.</p> <p>Now make a pull request. Make sure that the repo for your template is public so that the pushkin team can review it.</p>"},{"location":"faq/FAQ/","title":"Frequently Asked Qustions (FAQs)","text":""},{"location":"faq/FAQ/#what-are-all-these-different-github-repos","title":"What are all these different GitHub repos?","text":"<p>If you go to the main Pushkin Consortium page on GitHub, you will see a number of different repos. You may not be sure where to find the code or help you're looking for. Here is a quick guide on the most important repos for beginning users/contributors:</p> <ul> <li> <p>pushkin: This repo actually contains the documentation you're currently reading. You probably won't need to look at the contents of this repo unless you are suggesting edits to the docs (for which we'll happily review pull requests!). However, this repo is especially important to newer members of the Pushkin community, because this is where you'll find our discussion board. Please feel free to open up a discussion with our team and other Pushkin users! You also may find it useful to look at or post issues in this repo. Most issues related to the Pushkin ecosystem are here, but issues specific to particular modules can be found in the issues sections of those repos.</p> </li> <li> <p>pushkin-cli: This repo contains the code for the Pushkin command line interface (or \"CLI\"). This is the software you're interacting with when you run <code>pushkin</code> commands from the terminal.</p> </li> <li> <p>Site templates (beginning \"pushkin-sitetemplate-\") like pushkin-sitetemplate-basic: The Pushkin CLI uses these templates when you run <code>pushkin install site</code> to set up your Pushkin site.</p> </li> <li> <p>Experiment templates (beginning \"pushkin-exptemplates-\") like pushkin-exptemplates-basic: The Pushkin CLI uses these templates when you run <code>pushkin install experiment</code> to add a particular experiment to your Pushkin site.</p> </li> </ul> <p>If you want to learn more about these or other Pushkin modules, see the relevant section of the 'ADVANCED' docs or the page on developing with Pushkin.</p>"},{"location":"faq/FAQ/#how-do-i-use-an-unpublished-version-of-the-cli","title":"How do I use an unpublished version of the CLI?","text":"<p>If you want to run an unpublished development version of the CLI rather than a published release, you will first need to clone the CLI repo onto your local machine. Then make sure you checkout the particular branch you want. Navigate to the root of the CLI using <code>cd</code> and run:</p> <pre><code> yarn install\n yarn build\n</code></pre> <p>Start Docker, navigate to the location where you want to install your Pushkin site, and create the directory just as in the quickstart. Now instead of running <code>pushkin install site</code>, you can access the unpublished CLI command by running:</p> <pre><code> node [path_to_repo]/pushkin-cli/build/index.js install site\n</code></pre> <p>If your Pushkin site and the CLI repo are in the same parent directory, you can simply run <code>node ../pushkin-cli/build/index.js install site</code>. You can access the other CLI commands by replacing <code>pushkin</code> in the same way with <code>node ../pushkin-cli/build/index.js</code>.</p>"},{"location":"faq/FAQ/#how-do-i-use-unpublished-templates","title":"How do I use unpublished templates?","text":"<p>If you want to run an unpublished site or experiment template, you can select \"url\" after running <code>install site</code> or <code>install experiment</code>. When prompted, enter the URL to the releases of the relevant GitHub repo. The URL should begin with \"https://\" and end with \"releases\", but either the api.github.com or github.com URL will work.</p>"},{"location":"getting-started/deploying-to-aws/","title":"Deploying to AWS","text":""},{"location":"getting-started/deploying-to-aws/#important-note","title":"\ud83d\udea8 Important Note","text":"<p>Due to an update in AWS resources, the CLI-based AWS deploy does not currently work and is being updated. In the meantime, you can still manually deploy to AWS.</p>"},{"location":"getting-started/deploying-to-aws/#requirements","title":"Requirements","text":"<ul> <li>Finished the Quickstart</li> <li>Install a Postgres manager such as SQLPro for Postgres, which costs $7.99/month after the free trial ends. Free and open-source managers are also available (e.g., pgadmin). Or, if you become very comfortable connecting to postgres through the command line (not documented in this tutorial), then you may not need a Postgres manager.</li> <li>(Must be done approximately 24 hours in advance:) Create an Amazon Web Services account.</li> <li>Install and configure the AWS CLI.</li> </ul> <p>Note: When configuring AWS, be sure to specify <code>json</code> as your default output format:</p> <pre><code> aws configure\nAWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE\nAWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nDefault region name [None]: us-east-1\nDefault output format [None]: json\n</code></pre> <ul> <li>Install ECS CLI. (Do only the first page. There's no need to configure to the 'configuration' page. The Pushkin CLI will handle this for you.)</li> </ul> <ul> <li>Create a DockerHub account if you haven't already. Then tell Pushkin what your DockerHub ID is by running:</li> </ul> <pre><code> pushkin setDockerHub\n</code></pre> <p>You can change your ID at any point by re-running this command.</p>"},{"location":"getting-started/deploying-to-aws/#domain-registration","title":"Domain registration","text":""},{"location":"getting-started/deploying-to-aws/#purchase-a-domain","title":"Purchase a domain","text":"<p>You can buy domains many places, but there is some convenience to doing it through AWS itself, which is reasonably priced:</p> <p></p> <p>Cheaper domains on AWS currently cost around $12/yr, but if you would like a trendier domain, you can expect to pay more. Students may be able to get a free domain through NameCheap for Education.</p>"},{"location":"getting-started/deploying-to-aws/#set-up-an-ssl-certificate","title":"Set up an SSL certificate","text":"<p>In order to have encryption\u2014which you want!\u2014you need a certificate. You can get this for free through AWS, though it's particularly easy to set this up if you registered your domain through AWS as well:</p> <ol> <li>First, make sure you are in the US-East-1 zone. (We read that this matters, though we haven't confirmed this.)</li> <li>In the AWS Certificate Manager, select \"Provision Certificate\"</li> <li>Request a public certificate.</li> <li>Enter (1) your domain and (2) your domain preceded by <code>*.</code>. Thus for 'gameswithwords.org', you would enter <code>gameswithwords.org</code> and <code>*.gameswithwords.org</code>).</li> <li>If you registered your domain with AWS, use DNS validation. Otherwise, follow the instructions.</li> <li>Skip through the next couple steps, then create a CNAME record. This is simple if you used AWS for your domain registration; otherwise, follow the instructions. </li> </ol> <p>At this point, you wait for your certificate to be issued. Depending on how you registered your domain, this may take variable amounts of time. For us, it usually only takes a few minutes.</p> <p>SSL certificates set up outside of AWS vary in cost, but start around $8/year.</p>"},{"location":"getting-started/deploying-to-aws/#initializing-aws-deploy","title":"Initializing AWS deploy","text":"<p>Run:</p> <pre><code> pushkin aws init\n</code></pre> <p>You should be asked to name your project, to enter the aws profile you want to use, choose a security certificate, and choose a domain name. In the latter two cases, the certificate and domain you created in the steps above should be available as options (if not, check that you completed those steps and can see the resources in the AWS console).</p> <p>It usually takes 5-10 minutes for the program to complete. It tends to stick at \"Finished syncing files\" and \"Creating ECS tasks,\" although the exact location could change in future versions. When the program successfully completes, you should be able to navigate to your website at your chosen domain.</p>"},{"location":"getting-started/deploying-to-aws/#what-do-i-do-if-aws-init-crashes","title":"What do I do if aws init crashes?","text":"<p>Deploying to AWS is very complicated. Sometimes, it will fail. Try debugging by doing the following in the following order:</p> <ol> <li>Try rerunning <code>pushkin aws init</code>.</li> <li>Try deleting your deploy (<code>pushkin aws armageddon</code>) and then running (<code>pushkin aws init --force</code>). The <code>--force</code> tag insures that any local aws config information is reset.</li> <li>Ask for help on the Pushkin forum. Post ALL of the output from your run of aws init.</li> </ol>"},{"location":"getting-started/deploying-to-aws/#deleting-your-aws-deploy","title":"Deleting your AWS deploy","text":"<p>AWS will charge you for services you have running. If you are just doing a test site, you may want to delete it afterwards to minimize charges. Run:</p> <pre><code> pushkin aws armageddon\n</code></pre> <p>When it completes, Armageddon will list remaining services that it hasn't deleted. Armageddon is usually unable to delete everything the first time. This is certain services can't be deleted until other services have finished deleting. You will usually see an error message. Wait a few minutes and run <code>pushkin aws armageddon</code>. The second time should be the charm. If you are still having problems, see deleting through the console.</p>"},{"location":"getting-started/tutorial-simple-experiment/","title":"Tutorial: Simple Experiment","text":""},{"location":"getting-started/tutorial-simple-experiment/#summary-of-tutorial-content","title":"Summary of tutorial content","text":"<p>Pushkin\u2019s modularity means that, in principle, you could probably use any javascript-based experiment engine to write your experiments. However, we highly recommend using jsPsych. Pushkin has only been extensively tested with jsPsych, and all the documentation currently assumes you are using jsPsych.</p> <p>The tutorial below starts with a simple lexical decision task written in plain jsPsych 7. The tutorial below explains how to modify this code to run in Pushkin. This is a recommended tutorial for learning the ropes, but a more complete experiment template for lexical decision is available to install through Pushkin (read more)</p> <p>If you are not familiar with jsPsych, please consult the documentation first. We recommend you also walk through some of the tutorials.</p> <p>Note: As of v3.6.0 of the Pushkin CLI, the procedures described here for moving the timeline and importing plugins can be automated if you choose to import a jsPsych experiment when you run <code>pushkin install experiment</code> and select the basic template (v5+). You can still do these manually if you choose. You may also need to do parts of these procedures in the course of modifying one of the other experiment templates.</p>"},{"location":"getting-started/tutorial-simple-experiment/#initial-code","title":"Initial code","text":"<p>We will start with a simple lexical decision experiment. The code has been adapted from the experiment here in order to be compatible with jsPsych 7. You can save the code below as an .html file to run it as a standalone jsPsych experiment:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;script src=\"https://unpkg.com/jspsych@7.3.3\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/@jspsych/plugin-html-keyboard-response@1.1.2\"&gt;&lt;/script&gt;\n    &lt;link\n      href=\"https://unpkg.com/jspsych@7.3.3/css/jspsych.css\"\n      rel=\"stylesheet\"\n      type=\"text/css\"\n    /&gt;\n    &lt;style&gt;\n      .fixation {\n        border: 2px solid black;\n        height: 100px;\n        width: 200px;\n        font-size: 24px;\n        position: relative;\n        margin: auto;\n      }\n      .fixation p {\n        width: 100%;\n        position: absolute;\n        margin: 0.25em;\n      }\n      .fixation p.top {\n        top: 0px;\n      }\n      .fixation p.bottom {\n        bottom: 0px;\n      }\n      .correct {\n        border-color: green;\n      }\n      .incorrect {\n        border-color: red;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n  &lt;script&gt;\n    const jsPsych = initJsPsych();\n\n    const timeline = [];\n\n    var welcome = {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: consent + \"&lt;p&gt;Press spacebar to continue.&lt;/p&gt;\",\n      choices: [\" \"],\n    };\n\n    timeline.push(welcome);\n\n    var instructions_1 = {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `\n        &lt;p&gt;You will see two sets of letters displayed in a box, like this:&lt;/p&gt;\n        &lt;div class=\"fixation\"&gt;&lt;p class=\"top\"&gt;HELLO&lt;/p&gt;&lt;p class=\"bottom\"&gt;WORLD&lt;/p&gt;&lt;/div&gt;\n        &lt;p&gt;Press Y if both sets are valid English words. Press N if one or both is not a word.&lt;/p&gt;\n        &lt;p&gt;Press Y to continue.&lt;/p&gt;\n      `,\n      choices: [\"y\"],\n    };\n\n    timeline.push(instructions_1);\n\n    var instructions_2 = {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `\n        &lt;p&gt;In this case, you would press N.&lt;/p&gt;\n        &lt;div class=\"fixation\"&gt;&lt;p class=\"top\"&gt;FOOB&lt;/p&gt;&lt;p class=\"bottom\"&gt;ARTIST&lt;/p&gt;&lt;/div&gt;\n        &lt;p&gt;Press N to begin the experiment.&lt;/p&gt;\n      `,\n      choices: [\"n\"],\n    };\n\n    timeline.push(instructions_2);\n\n    var lexical_decision_procedure = {\n      timeline: [\n        {\n          type: jsPsychHtmlKeyboardResponse,\n          stimulus: '&lt;div class=\"fixation\"&gt;&lt;/div&gt;',\n          choices: \"NO_KEYS\",\n          trial_duration: 1000,\n        },\n        {\n          type: jsPsychHtmlKeyboardResponse,\n          stimulus: function () {\n            let first_word = jsPsych.timelineVariable(\"word_1\");\n            let second_word = jsPsych.timelineVariable(\"word_2\");\n            first_word =\n              '&lt;div class=\"fixation\"&gt;&lt;p class=\"top\"&gt;' + first_word + \"&lt;/p&gt;\";\n            second_word =\n              '&lt;div class=\"fixation\"&gt;&lt;p class=\"bottom\"&gt;' + second_word + \"&lt;/p&gt;\";\n            return first_word + second_word;\n          },\n          choices: [\"y\", \"n\"],\n          data: {\n            both_words: jsPsych.timelineVariable(\"both_words\"),\n            related: jsPsych.timelineVariable(\"related\"),\n          },\n          on_finish: function (data) {\n            if (data.both_words) {\n              data.correct = jsPsych.pluginAPI.compareKeys(data.response, \"y\");\n            } else {\n              data.correct = jsPsych.pluginAPI.compareKeys(data.response, \"n\");\n            }\n          },\n        },\n        {\n          type: jsPsychHtmlKeyboardResponse,\n          stimulus: function () {\n            let last_correct = jsPsych.data\n              .getLastTrialData()\n              .values()[0].correct;\n            if (last_correct) {\n              return '&lt;div class=\"fixation correct\"&gt;&lt;/div&gt;';\n            } else {\n              return '&lt;div class=\"fixation incorrect\"&gt;&lt;/div&gt;';\n            }\n          },\n          choices: \"NO_KEYS\",\n          trial_duration: 2000,\n        },\n      ],\n      timeline_variables: stimArray,\n      randomize_order: true,\n    };\n\n    timeline.push(lexical_decision_procedure);\n\n    var data_summary = {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function () {\n        // Calculate performance on task\n        let correct_related = jsPsych.data\n          .get()\n          .filter({ related: true, correct: true })\n          .count();\n        let total_related = jsPsych.data\n          .get()\n          .filter({ related: true })\n          .count();\n        let mean_rt_related = jsPsych.data\n          .get()\n          .filter({ related: true, correct: true })\n          .select(\"rt\")\n          .mean();\n\n        let correct_unrelated = jsPsych.data\n          .get()\n          .filter({ related: false, both_words: true, correct: true })\n          .count();\n        let total_unrelated = jsPsych.data\n          .get()\n          .filter({ related: false, both_words: true })\n          .count();\n        let mean_rt_unrelated = jsPsych.data\n          .get()\n          .filter({ related: false, both_words: true, correct: true })\n          .select(\"rt\")\n          .mean();\n\n        // Show results and debrief\n        let results = `&lt;p&gt;You were correct on ${correct_related} of ${total_related} related word pairings!\n            Your average correct response time for these was ${Math.round(\n              mean_rt_related\n            )} milliseconds.&lt;/p&gt;\n            &lt;p&gt;For unrelated word pairings, you were correct on ${correct_unrelated} of ${total_unrelated}!\n            Your average correct response time for these was ${Math.round(\n              mean_rt_unrelated\n            )} milliseconds.&lt;/p&gt;`;\n        return results + debrief;\n      },\n      choices: \"NO_KEYS\",\n    };\n\n    timeline.push(data_summary);\n\n    jsPsych.run(timeline);\n  &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"getting-started/tutorial-simple-experiment/#move-the-timeline","title":"Move the timeline","text":"<p>Follow the Quickstart through <code>pushkin install site</code> or navigate to the root directory of an existing site. Create a new experiment named \"lex\" and select the latest version of the basic template:</p> <pre><code>pushkin install experiment\n</code></pre> <p>You should now have a folder <code>experiments/lex</code> with the following content:</p> <pre><code>\u2514\u2500\u2500 lex\n    \u251c\u2500\u2500 api controllers\n    \u251c\u2500\u2500 config.yaml\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 migrations\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 web page\n    \u2502    \u2514\u2500\u2500 src\n    \u2502         \u251c\u2500\u2500 assets\n    \u2502         \u251c\u2500\u2500 experiment.js\n    \u2502         \u2514\u2500\u2500 index.js\n    \u2514\u2500\u2500 worker\n</code></pre> <p>Open <code>experiment.js</code>. It should look like this:</p> <pre><code>import jsPsychHtmlKeyboardResponse from \"@jspsych/plugin-html-keyboard-response\";\n\nexport function createTimeline(jsPsych) {\n  const timeline = [];\n\n  var hello_trial = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: \"Hello world!\",\n  };\n\n  timeline.push(hello_trial);\n\n  return timeline;\n}\n</code></pre> <p>From the jsPsych code above, copy everything between <code>const timeline = []</code> and <code>jsPsych.run(timeline);</code> (excluding those lines). Paste those lines into <code>/experiments/lex/web page/src/experiment.js</code> (replacing the existing content) between <code>const timeline = []</code> and <code>return timeline</code>. Thus you should now have a function <code>createTimeline()</code> within which you build up and finally return the timeline for the experiment.</p>"},{"location":"getting-started/tutorial-simple-experiment/#import-plugins","title":"Import plugins","text":"<p>In the jsPsych code above, plugins are loaded with <code>&lt;script&gt;</code> tags. In a Pushkin experiment, plugins are loaded with <code>import</code> statements. The basic template already includes the html-keyboard-response plugin as a dependency, so no additional modifications are needed. If you wanted to add additional jsPsych plugins to this experiment, you would simply use additional import statements in the same format (see examples here).</p>"},{"location":"getting-started/tutorial-simple-experiment/#moving-css-styling","title":"Moving CSS styling","text":"<p>The experiment above relies on CSS styling described in a <code>&lt;style&gt;</code> tag to display the experiment correctly. This styling needs be moved to <code>/experiments/lex/web page/src/assets/experiment.css</code> in order to apply your Pushkin experiment. The new CSS file will look like:</p> <pre><code>@import url(\"https://unpkg.com/jspsych@7.3.3/css/jspsych.css\");\n\n.fixation {\n  border: 2px solid black;\n  height: 100px;\n  width: 200px;\n  font-size: 24px;\n  position: relative;\n  margin: auto;\n}\n.fixation p {\n  width: 100%;\n  position: absolute;\n  margin: 0.25em;\n}\n.fixation p.top {\n  top: 0px;\n}\n.fixation p.bottom {\n  bottom: 0px;\n}\n\n.correct {\n  border-color: green;\n}\n\n.incorrect {\n  border-color: red;\n}\n</code></pre>"},{"location":"getting-started/deploying-to-aws/","title":"Deploying to AWS","text":"<p>Deploy your basic Pushkin site and experiments to Amazon Web Services.</p>"},{"location":"getting-started/deploying-to-aws/#important-note","title":"\ud83d\udea8 Important Note","text":"<p>Due to an update in AWS resources, the CLI-based AWS deploy does not currently work and is being updated. In the meantime, you can still manually deploy to AWS.</p>"},{"location":"getting-started/deploying-to-aws/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure your have:</p> <ol> <li>Finished the Quickstart, including installing a Postgres manager. </li> <li>Created an Amazon Web Services account. (Note: This must be done approximately 24 hours in advance of when you would like to follow this tutorial.) </li> </ol>"},{"location":"getting-started/deploying-to-aws/#aws-deployment-steps","title":"AWS Deployment Steps","text":"<ul> <li>Install required software.</li> <li>Configure the AWS and ECS CLIs.</li> <li>Register a domain.</li> <li>Set up DockerHub.</li> <li>Initialize AWS Deploy</li> </ul>"},{"location":"getting-started/deploying-to-aws/configure-aws-and-ecs-clis/","title":"Configure the AWS CLI and ECS CLIs","text":""},{"location":"getting-started/deploying-to-aws/configure-aws-and-ecs-clis/#aws-cli","title":"AWS CLI","text":"<p>Configure the AWS CLI. (The main steps are reproduced below for your convenience.)</p> <p>First, you will need to generate access keys. Best practices dictate that you create an IAM Admin User and Group rather than creating root access keys. </p> <p>To create an IAM user, sign into Identity and Access Management in your AWS console using your root user credentials.</p> <p></p> <p>Navigate to My Account and enable access to billing data for IAM users.</p> <p></p> <p>Navigate back to Identity and Access Management, select Users in the left sidebar and click Add user. </p> <p></p> <p>Set username as <code>Administrator</code> and click Next: Permissions.</p> <p></p> <p>Under the Add user to group tab, select Create group. Call the group name <code>Administrators</code> and check the AdministratorAccess job function in the list of policies. Then click Create group to continue.</p> <p></p> <p>Click through the Tags page, review your settings and click Create user. Download the CSV with login information.</p> <p></p> <p>Return to the Users page and select the Security credentials tab for the <code>Administrator</code> user you just created. </p> <p></p> <p>Under Access keys, click Create access keys.</p> <p></p> <p>Run <code>aws configure --profile myprofile</code> (where you substitute <code>myprofile</code> with a name of your choosing; this is just in case you want to have multiple logins, which you probably will), pasting your Access Key ID and Secret Access key as needed.</p> <p>Note: When configuring AWS, be sure to specify <code>us-east-1</code> as your default region name and <code>json</code> as your default output format.</p> <p>The output should look like this.</p> <pre><code> aws configure\nAWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE\nAWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nDefault region name [None]: us-east-1\nDefault output format [None]: json\n</code></pre> <p></p>"},{"location":"getting-started/deploying-to-aws/configure-aws-and-ecs-clis/#ecs-cli","title":"ECS CLI","text":"<p>There's no need follow the steps on the ECS CLI 'configuration' page. The Pushkin CLI will handle this for you.</p> <p>Note: In configuring the ECS CLI, you'll need the AWS profile name you are using, as well as the related Access Key ID and Secret Access Key. If you can't remember the name of your profile, you can get a list of active profiles on your computer using:</p> <pre><code> aws configure list-profiles\n</code></pre> <p>To see the Access Key ID and Secret Access Key for a given profile, run the following, where <code>[profile]</code> is replaced with the name of the profile you want to use:</p> <pre><code> aws configure get aws_access_key_id --profile [profile]\n aws configure get aws_secret_access_key --profile [profile]\n</code></pre> <p></p>"},{"location":"getting-started/deploying-to-aws/dockerhub/","title":"DockerHub","text":"<p>Create a DockerHub account if you haven't already. Then tell Pushkin what your DockerHub ID is by running:</p> <pre><code> pushkin setDockerHub\n</code></pre> <p>You can change your ID at any point by re-running this command.</p>"},{"location":"getting-started/deploying-to-aws/domain-registration/","title":"Register a domain","text":""},{"location":"getting-started/deploying-to-aws/domain-registration/#purchase-a-domain","title":"Purchase a domain","text":"<p>You can buy domains in many places, but there is some convenience to doing it through AWS itself, which is reasonably priced:</p> <p></p> <p>Cheaper domains on AWS currently cost around $12/yr, but if you would like a trendier domain, you can expect to pay more. Students may be able to get a free domain through NameCheap for Education.</p>"},{"location":"getting-started/deploying-to-aws/domain-registration/#set-up-an-ssl-certificate","title":"Set up an SSL certificate","text":"<p>In order to have encryption\u2014which you want!\u2014you need a certificate. You can get this for free through AWS, though it's particularly easy to set this up if you registered your domain through AWS as well:</p> <ol> <li>First, make sure you are in the US-East-1 zone. (This matters.)</li> <li>In the AWS Certificate Manager, select \"Provision Certificate\"</li> <li>Request a public certificate.</li> <li>Enter two your domain preceded by an <code>*</code> (thus 'gameswithwords.org' would be entered as <code>*.gameswithwords.org</code>).</li> <li>If you registered your domain with AWS, use DNS validation. Otherwise, follow the instructions.</li> <li>If you used AWS for your domain registration, Skip through the next couple of steps and click \"request\". If you did not, it may be more complicated. </li> <li>If you used AWS for your domain registration, select the certificate from the list of certificates. Scroll down to \"Domains\" and click \"Create records in Route 53\". Select the domain from the list.</li> </ol> <p>At this point, you wait for your certificate to be issued. Depending on how you registered your domain, this may take variable amounts of time. For us, it usually only takes a few minutes.</p> <p>SSL certificates set up outside of AWS vary in cost, but start around $8/year.</p>"},{"location":"getting-started/deploying-to-aws/initializing-aws-deploy/","title":"Initializing AWS deploy","text":"<p>Run:</p> <pre><code> pushkin aws init\n</code></pre> <p>You should be asked to name your project, to enter the aws profile you want to use (usually just \"default\"), choose a security certificate, and choose a domain name. In the latter two cases, the certificate and domain you created in the steps above should be available as options (if not, check that you completed those steps and can see the resources in the AWS console).</p> <p>It usually takes 5-10 minutes for the program to complete. It tends to stick at \"Finished syncing files\" and \"Creating ECS tasks,\" although the exact location could change in future versions. When the program successfully completes, you should be able to navigate to your website at your chosen domain.</p>"},{"location":"getting-started/deploying-to-aws/initializing-aws-deploy/#what-do-i-do-if-aws-init-crashes","title":"What do I do if aws init crashes?","text":"<p>Deploying to AWS is very complicated. Sometimes, it will fail. Try debugging by doing the following in the following order:</p> <ol> <li>Try rerunning <code>pushkin aws init</code>.</li> <li>Try deleting your deploy (<code>pushkin aws armageddon</code>) and then running (<code>pushkin aws init --force</code>). The <code>--force</code> tag insures that any local aws config information is reset.</li> <li>Ask for help on the Pushkin forum. Post ALL of the output from your run of aws init.</li> </ol>"},{"location":"getting-started/deploying-to-aws/initializing-aws-deploy/#deleting-your-aws-deploy","title":"Deleting your AWS deploy","text":"<p>AWS will charge you for services you have running. If you are just doing a test site, you may want to delete it afterwards to minimize charges. Run:</p> <pre><code> pushkin aws armageddon\n</code></pre> <p>When it completes, Armageddon will list remaining services that it hasn't deleted. Armageddon is usually unable to delete everything the first time. This is certain services can't be deleted until other services have finished deleting. You will usually see an error message. Wait a few minutes and run <code>pushkin aws armageddon</code>. The second time should be the charm. If you are still having problems, see deleting through the console.</p> <p>To get the latest news and updates on Pushkin, sign up for our newsletter here.</p>"},{"location":"getting-started/deploying-to-aws/install-required-software/","title":"Install Required Software","text":""},{"location":"getting-started/deploying-to-aws/install-required-software/#aws-cli","title":"AWS CLI","text":"<p>Install the AWS CLI. Install the version for your operating system, not the Docker image.</p> <p>Configuration steps will follow on the next page.</p>"},{"location":"getting-started/deploying-to-aws/install-required-software/#ecs-cli","title":"ECS CLI","text":"<p>Install ECS CLI. (Do only the first page. There's no need follow the steps on the 'configuration' page. The Pushkin CLI will handle this for you.)</p> <p>Note that the ECS CLI is no longer being actively maintained, so we may probably migrate in the near future.</p>"},{"location":"getting-started/deploying-to-aws/view-your-data/","title":"View Your Data","text":"<p>After you have deployed to AWS, you will want to view your data. </p> <p>An introduction to viewing your database with a Postgres manager is given in the Quickstart. Start there for information about how to download and install pgAdmin and how to view your data when testing locally.</p> <p>This tutorial will cover how to view your data from an AWS deployment. </p>"},{"location":"getting-started/deploying-to-aws/view-your-data/#setup","title":"Setup","text":"<ol> <li>Make sure your site has successfully been deployed using AWS. </li> <li>Open the <code>pushkin.yaml</code> for your site in a text editor.</li> <li>Start pgAdmin, which will open in your browser. </li> </ol>"},{"location":"getting-started/deploying-to-aws/view-your-data/#add-a-new-server","title":"Add a new server","text":"<p>By default, a database called Main is created when you deploy to AWS. Find this in your <code>pushkin.yaml</code>, which should look something like this:</p> <pre><code>experimentsDir: experiments\ncoreDir: pushkin\nDockerHubID: yourdockerhubid\ndatabases:\n  localtestdb:\n    user: postgres\n    pass: example\n    url: test_db\n    name: test_db\n    host: localhost\ninfo:\n  rootDomain: mydomain.com\n  whoAmI: Citizen Science Website\n  hashtags: 'science, learn'\n  email: me@mydomain.com\n  shortName: CSW\n  projName: myproject\n  awsName: myproject4c2da3b2-d5dc-4414-9d1f-9b30031333bb\naddons:\n  useForum: false\n  useAuth: true\n  authDomain: &lt;YOUR_AUTH0_DOMAIN&gt;\n  authClientID: &lt;YOUR_AUTH0_CLIENT_ID&gt;\nsalt: abc123\nfc:\n  popup: false\nproductionDBs:\n  Main:\n    type: Main\n    name: myprojectMain\n    host: myprojectmain.c3iwcrbpuehx.us-east-1.rds.amazonaws.com\n    user: postgres\n    pass: '0.9073399739822692'\n    port: 5432\n  Transaction:\n    type: Transaction\n    name: myprojectTransaction\n    host: myprojecttransaction.c3iwcrbpuehx.us-east-1.rds.amazonaws.com\n    user: postgres\n    pass: '0.8091098674547545'\n    port: 5432\n</code></pre> <p>Under <code>productionDBs</code>, find your <code>Main</code> database. You will need information from this section to complete the following steps:</p> <ol> <li>In the pgAdmin dashboard, under the Quick Links, click Add New Server.</li> <li>You can set the name of the server to anything, for example <code>Pushkin AWS Deploy</code>. </li> <li>Then move to the Connection tab and set Host name/address to <code>host</code> as it is specified in your <code>pushkin.yaml</code>. In the example above, it would be: <code>myprojectmain.c3iwcrbpuehx.us-east-1.rds.amazonaws.com</code>. </li> <li>Set the password to the your randomly generated password\u2014<code>0.9073399739822692</code> in the above example.</li> <li>Click Save and your Pushkin AWS Deploy server should appear in the left sidebar.</li> </ol>"},{"location":"getting-started/deploying-to-aws/view-your-data/#view-your-data_1","title":"View your data","text":"<p>To view your data tables, navigate to the left sidebar:</p> <ol> <li>Click to expand your Pushkin AWS Deploy server.</li> <li>Select myprojectMain under Databases. </li> <li>Select Schemas, which will also open its subitem public. </li> <li>Under public, choose Tables.</li> </ol> <p>By default, you should have 5 tables: <code>knex_migrations</code>, <code>knex_migrations_lock</code>, <code>pushkin_userMeta</code>, <code>pushkin_userResults</code>, and <code>pushkin_users</code>. You should also have one table for each experiment. If your experiment is called <code>mind</code>, you should have <code>mind_stimulusResponses</code>. </p> <p>To view a given table, right-click on it, hover over View/Edit Data, and click on All Rows, which will then appear in a new pgAdmin tab.</p> <p>For more information on how to use pgAdmin, you can read their documentation here.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/","title":"Installing Pushkin and dependencies","text":"<p>Start here to install Pushkin and its dependencies.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/#important-note","title":"\ud83d\udea8 Important Note","text":"<p>Due to an update in AWS resources, the CLI-based AWS deploy does not currently work and is being updated. In the meantime, you can still manually deploy to AWS.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/#choose-your-operating-system","title":"Choose your operating system.","text":"<ul> <li>macOS</li> <li>Windows 10</li> <li>Windows Subsystem for Linux (preferred)</li> <li>AWS EC2 Instance </li> <li>Ubuntu Linux</li> </ul>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/","title":"AWS EC2 Instance","text":"<p>Previously we recommended that Windows users use Pushkin through an AWS EC2 instance due to bugs in WSL that made the setup unreliable. This issue seems to have been resolved, so we now recommend using WSL instead of an EC2 instance. Using an EC2 instance has a number of limitations, including:</p> <ul> <li>You cannot do true local testing via <code>localhost</code>, as the IPv4 public IP address must be used.</li> <li>In our experience, timeout errors are more common on EC2 instances.</li> <li>If multiple experiments are installed, the EC2 instances may run out of space with the default amount of storage.</li> </ul> <p>However, users can choose to create a free-tier Amazon Web Services (AWS) EC2 instance for using and deploying Pushkin as an alternative to using WSL on Windows. In your instance, you will be able to run an Ubuntu virtual machine and follow the Ubuntu setup instructions. We suggest accessing this AWS EC2 instance from your local computer using the PuTTY SSH client, though in principle any SSH client for Windows should work.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#skip-to-section","title":"Skip to section","text":"<ul> <li>Create your AWS EC2 instance</li> <li>Install and configure PuTTY </li> <li>Connect to your EC2 instance</li> <li>Managing your AWS instance</li> <li>Next steps</li> </ul>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#create-your-aws-ec2-instance","title":"Create your AWS EC2 instance","text":""},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#create-your-aws-account","title":"Create your AWS Account","text":"<p>Go to Amazon Web Services and click Create a free account.</p> <p></p> <p>Complete the sign-up process and go to your inbox to confirm your email address.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#launch-your-ec2-instance","title":"Launch your EC2 Instance","text":"<p>Head to the AWS EC2 console and, in the left sidebar, click Instances.</p> <p></p> <p>Click on the Launch Instance button. </p> <p></p> <p>Scroll down to the Application and OS Images (Amazon Machine Image) and under the Quick Start tab and click on Ubuntu. The default selected should say Free tier eligible, but if it doesn't, click on the box and select a version that is free. </p> <p>Now, scroll down to the Key pair (login) option, and on the bottom right, click on Create new key pair, create a new key pair and give it a name, (e.g., \"pushkin-testing-key\"), set it to RSA key type and change the private key format to .ppk. Make sure to dowload this file, keep it somewhere as this will be necessary to connect your instance later</p> <p>Next, on the right of the Network settings heading, select Edit.</p> <p>Select Add security group rule, under Type, choose HTTP in the drop-down menu. Then, select Add rule again and, under Type, select \"HTTPS\". </p> <p>Now, click on Launch Instance.</p> <p></p> <p>Next, in the box that says \"Your instances are now launching,\" click the instance ID, which will be an alphanumeric string.</p> <p></p> <p>This will take you to the AWS EC2 console. You should keep this window open.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#connect-to-your-ec2-instance","title":"Connect to your EC2 instance","text":"<p>In the Windows start menu, open PuTTY.</p> <p>In the Category pane, choose Session.</p> <p></p> <p>In the Host Name box, enter \"ubuntu@\" followed by the public DNS of your instance.</p> <p></p> <p>The public DNS is found on the AWS EC2 console. One example is \"ec2-18-191-193-31.us-east-2.compute.amazonaws.com\". The 2- and 3-digit numbers will be different for each instance and \"us-east-2\" is based on what region you are in.</p> <p></p> <p>Ensure that the Port value is 22, the under Connection type select SSH.</p> <p></p> <p>In the Category pane, expand Connection, expand SSH, expand Auth, then choose Credentials.</p> <p>Select the \".ppk\" file you generated for your key pair and choose Open.</p> <p>If you plan to start the session again later, you can save the session information. Under Category, choose Session, enter a name for the session in Saved Sessions, and then choose Save.</p> <p>Note: When you stop running the AWS instance from the AWS console, on restart the IP address and the Public DNS will be different. If you save your settings in PuTTY, you will need to replace part of your host name with the new IP address. All other saved settings remain the same.</p> <p></p> <p>You can now choose Open to connect to your instance. PuTTY will display a security alert dialog box asking if you trust the host you are connecting to: choose Yes.</p> <p></p> <p>You are now connected to your instance! In the window that appears, run the following commands to update your Ubuntu EC2 instance:</p> <pre><code> sudo apt update\n sudo apt upgrade\n</code></pre> <p></p> <p></p> <p>While upgrading, a box may come up that says the following:</p> <pre><code>A new version of /boot/grub/menu.lst is available, but the version installed currently has been locally modified.\n</code></pre> <p>Use the UP arrow key to select <code>install the package maintainer's version</code> and press ENTER to continue.</p> <p></p> <p>(For more on package management with apt, you can see the documentation here. To learn more about the basics of the Linux command line, you can follow this tutorial.)</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#managing-your-aws-instance","title":"Managing your AWS instance","text":""},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#remember-to-stop-your-instance","title":"Remember to stop your instance","text":"<p>To avoid incurring charges on AWS's Free Tier, always shut down your AWS EC2 instance when you're done using it. To do this, go to the AWS EC2 console, right-click on your instance, expand Instance State, and select Stop. When a dialog box appears, click Yes, Stop.</p> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#how-to-restart-your-instance","title":"How to restart your instance","text":"<p>To restart your instance, go to the AWS EC2 console, right-click on your instance, expand Instance State, and select Start.</p> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ec2-install/#next-steps","title":"Next steps","text":"<p>From here, you can follow the instructions for Ubuntu Linux to finish the installation.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/","title":"macOS","text":""},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#skip-to-section","title":"Skip to section","text":"<ul> <li>Install Homebrew</li> <li>Install Yarn</li> <li>Install pushkin-cli</li> <li>Install Docker</li> <li>Next steps</li> </ul>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#install-homebrew","title":"Install Homebrew","text":"<p>If you don\u2019t have Homebrew, install it. If you do not have Xcode installed yet, this installation will prompt you to install it as well.</p> <p></p> <p>Note that Homebrew requires a 64-bit Intel CPU, macOS High Sierra /(10.13/) or higher, Command Line Tools /(CLT/) for Xcode, and a Bourne-compatible shell for installation like bash or zsh.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#install-node","title":"Install Node","text":"<p>If you don't have an installation of Node yet (you'd know if you did), you should install it:</p> <pre><code> brew install node\n</code></pre>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#install-yarn","title":"Install Yarn","text":"<p>Then run the following to get Yarn, which will let you download Pushkin:</p> <pre><code> brew install yarn\n</code></pre> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#install-yalc","title":"Install Yalc","text":"<p>Install Yalc globally.</p> <pre><code> yarn global add yalc\n</code></pre> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#install-pushkin-cli","title":"Install pushkin-cli","text":"<p>Install pushkin-cli package globally.</p> <pre><code> yarn global add pushkin-cli\n</code></pre> <p></p> <p>Confirm that pushkin-cli is installed by running:</p> <pre><code> pushkin --help\n</code></pre> <p>You should get a list of commands with some documentation for each.</p> <p></p> <p>Confirm that you have version <code>2.0.0</code> or later by running:</p> <pre><code> pushkin --version\n</code></pre> <p>and reading the output.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#install-docker","title":"Install Docker","text":"<p>Next, install Docker.</p> <p></p> <p>Confirm that you have at least Docker Engine 23.0 and Docker Desktop 4.19. </p>"},{"location":"getting-started/installing-pushkin-and-dependencies/macos-install/#next-steps","title":"Next steps","text":"<p>Great! You're all done. Head over here to build a basic Pushkin site and experiment.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/","title":"Ubuntu Linux","text":"<p>These instructions were created using Ubuntu 18.04 and the apt package manager. They should generalize to other Linux distributions and package managers, however.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#skip-to-section","title":"Skip to section","text":"<ul> <li>Install curl</li> <li>Install Node.js</li> <li>Install and configure Yarn</li> <li>Install Yalc</li> <li>Install pushkin-cli</li> <li>Install and configure Docker Engine and Docker Compose</li> <li>Next steps</li> </ul>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#install-curl","title":"Install curl","text":"<p>First, ensure that you have curl installed, as this will be necessary to download Node.js. If it isn't installed, you can install it using the following commands:</p> <pre><code> sudo apt update\n sudo apt install curl\n</code></pre> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#install-nodejs","title":"Install Node.js","text":"<p>To install Node.js, first run the following command to install nvm:</p> <pre><code> curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n source ~/.bashrc \n</code></pre> <p>Then use nvm to install Node.js:</p> <pre><code> nvm install 20.2.0\n</code></pre> <p>In case the preferred version of Node.js is changed, use the following commands to update:</p> <pre><code> nvm install &lt;node_version&gt;\n nvm use &lt;node_version&gt;\n</code></pre> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#install-and-configure-yarn","title":"Install and configure Yarn","text":"<p>You will next want to install the Yarn package manager. Official instructions (copied below for convenience) are available here.</p> <p>Use npm, which comes bundled with Node.js that you just installed:</p> <pre><code> npm install --global yarn\n</code></pre> <p>Then check that Yarn is installed by running:</p> <pre><code>yarn --version\n</code></pre> <p></p> <p>To allow Yarn to install pushkin-cli globally, run the following steps, based on this Stack Overflow solution.</p> <p>Run the following:</p> <pre><code> yarn config set prefix ~/.yarn\n echo -e '\\nexport PATH=\"$PATH:`yarn global bin`\"\\n' &gt;&gt; ~/.bashrc\n source ~/.bashrc\n</code></pre> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#install-yalc","title":"Install Yalc","text":"<p>Install Yalc globally.</p> <pre><code> yarn global add yalc\n</code></pre> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#install-pushkin-cli","title":"Install pushkin-cli","text":"<p>Next, install the pushkin-cli package globally.</p> <pre><code> yarn global add pushkin-cli\n</code></pre> <p></p> <p>Confirm that pushkin-cli is installed by running:</p> <pre><code> pushkin --help\n</code></pre> <p>You should get a list of commands with some documentation for each.</p> <p></p> <p>Confirm that you have version <code>2.0.0</code> or later by running:</p> <pre><code> pushkin --version\n</code></pre> <p>and reading the output.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#install-and-configure-docker-engine-and-docker-compose","title":"Install and configure Docker Engine and Docker Compose","text":"<p>Next, install Docker Engine using these instructions (copied below for convenience).</p> <pre><code> sudo apt-get update\n sudo apt-get install ca-certificates curl gnupg\n</code></pre> <p></p> <p>Add Docker\u2019s official GPG key:</p> <pre><code> sudo install -m 0755 -d /etc/apt/keyrings\n curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n sudo chmod a+r /etc/apt/keyrings/docker.gpg\n</code></pre> <p>Use the following command to set up the repository:</p> <pre><code> echo \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> <p></p> <p>Next, update the apt package index:</p> <pre><code> sudo apt-get update\n</code></pre> <p>Install Docker Engine, containerd, and Docker Compose:</p> <pre><code> sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose docker-compose-plugin\n</code></pre> <p></p> <p>Check that Docker Engine is installed correctly by running:</p> <pre><code> sudo docker run hello-world\n</code></pre> <p>If Docker Engine and Docker Compose are installed correctly, this should generate some output, including:</p> <pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre> <p></p> <p>Next, follow these post-installation instructions (copied below for convenience) to manage Docker as a non-root user. (You can ignore the rest of the post-installation instructions.)</p> <pre><code> sudo groupadd docker\n sudo usermod -aG docker $USER\n newgrp docker \n docker run hello-world\n</code></pre> <p></p>"},{"location":"getting-started/installing-pushkin-and-dependencies/ubuntu-install/#next-steps","title":"Next steps","text":"<p>Great! You're all done. Head over here to build a basic Pushkin site and experiment.</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/windows-install/","title":"Windows 10","text":"<p>To install Pushkin, Windows users will have to install the Windows Subsystem for Linux (WSL) 2. Note that this process will require restarting your computer multiple times. This tutorial explains how to configure WSL 2 and install a Linux distribution from the Microsoft Store. We recommend using Ubuntu 20.04. </p> <p>While we recommend following the tutorial above for the most complete information about installing WSL, in most cases you can simply run Windows PowerShell as an administrator and run:</p> <pre><code>$ wsl --install\n</code></pre> <p>This will install WSL using the default configuration. It will prompt you to reboot your machine when it finishes. Do that, and then continue on.</p> <p>Pushkin requires using WSL 2. To check which version of WSL you are using, run the following command in Windows Powershell:</p> <pre><code> wsl --list --verbose\n</code></pre> <p></p> <p>This will give you a list of your installed Linux distributions and what version of WSL they are using. If your distribution is using WSL 1, run:</p> <pre><code> wsl --set-version &lt;distribution name&gt; 2\n</code></pre> <p>The distribution name should be the name given in the previous list for your Linux distribution.</p> <p>As the tutorial details, you will need Windows 10 version 2004 to be able to use WSL 2. If you follow the instructions in the tutorial and cannot update to version 2004, these steps may be able to help.</p> <p>After you have enabled WSL 2 and installed Ubuntu, you will probably also want to enable copy and paste in the terminal by right-clicking on the terminal window, selecting Properties and following these instructions.</p> <p></p> <p>Next, run the following commands in the Ubuntu terminal to update your Ubuntu packages. This (and other commands with <code>sudo</code> in front of them) will prompt you to give the Ubuntu password you set up when you installed it. It will also prompt you to respond with <code>y</code> and press ENTER to confirm that you would like to install or update software. </p> <pre><code> sudo apt update\n sudo apt upgrade\n</code></pre> <p></p> <p>(For more on package management with apt, you can see the documentation here. To learn more about the basics of the Linux command line, you can follow this tutorial.)</p>"},{"location":"getting-started/installing-pushkin-and-dependencies/windows-install/#next","title":"Next","text":"<p>From here, you can follow the instructions for Ubuntu Linux to finish the installation.</p>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":""},{"location":"getting-started/quickstart/#skip-to-section","title":"Skip to section","text":"<ul> <li>Creating a basic new Pushkin site</li> <li>Updating configs</li> <li>Making an experiment</li> <li>Setting up logins</li> <li>Local testing</li> <li>Updating</li> <li>Viewing your database with a Postgres manager</li> <li>Starting over</li> </ul> <p>If you haven't installed pushkin-cli and its dependencies, start here first.</p>"},{"location":"getting-started/quickstart/#creating-a-basic-new-pushkin-site","title":"Creating a basic new Pushkin site","text":"<p>Make sure Docker is running by running the command <code>docker info</code>; if it isn't, you can run <code>dockerd</code> or <code>sudo dockerd</code> to start it.</p> <p>Open a terminal window. Create an empty directory (e.g., <code>pushkin_quickstart</code>) and enter this directory using the following commands:</p> <pre><code> mkdir pushkin_quickstart\n cd pushkin_quickstart/\n</code></pre> <p></p> <p>(For more on basic terminal commands, you can check out this blog post.)</p> <p>Install your first pushkin site the in the directory you just created:</p> <pre><code> pushkin install site\n</code></pre> <p>You will be asked to select a site template to use. Choose basic, then choose the recommended version.</p> <p></p> <p>(See example output for this command here.)</p> <p>This sets up a skeleton website in the current folder and a development database. Once the command finishes, you should have a directory tree like this:</p> <pre><code>\u251c\u2500\u2500 experiments\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 pushkin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 docker-compose.dev.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 front-end\n\u251c\u2500\u2500 pushkin.yaml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 users\n    \u251c\u2500\u2500 config.yaml\n    \u2514\u2500\u2500 migrations\n</code></pre> <p>The files in the <code>pushkin</code> folder won\u2019t need to be edited at all except those in the <code>front-end</code> folder.</p>"},{"location":"getting-started/quickstart/#updating-configs","title":"Updating configs","text":"<p>Open <code>pushkin.yaml</code> in your project root directory. It should look something like:</p> <pre><code># main directories relative to project root ('..')\nexperimentsDir: \"experiments\"\ncoreDir: \"pushkin\"\nDockerHubID: \"\"\n\n# databases configs experiments can use\ndatabases:\n  localtestdb:\n    user: \"postgres\"\n    pass: \"example\"\n    url: \"test_db\"\n    name: \"test_db\"\n    host: \"localhost\"\n\n# basic site configuration\ninfo:\n  rootDomain: \"localhost\"\n  whoAmI: \"Citizen Science Website\"\n  hashtags: \"science, learn\"\n  email: \"me@mydomain.com\"\n  shortName: \"CSW\"\naddons:\n  useForum: false\n  useAuth: true\n  authDomain: \"&lt;YOUR_AUTH0_DOMAIN&gt;\"\n  authClientID: \"&lt;YOUR_AUTH0_CLIENT_ID&gt;\"\nsalt: \"abc123\"\nfc: { popup: false }\n</code></pre> <p>You can ignore most of these (or all, if you want to keep the defaults). But probably you should change:</p> <ul> <li>whoAmI: This is the name of your website that will be displayed to users</li> <li>shortName: An abbreviated name of your website</li> <li>hashtags: These are hashtags used for social media</li> <li>email: An email where notifications, etc., will be sent to.</li> </ul> <p>The one you should definitely change is <code>salt</code>. This is used to encrypt private information. Type in any alphanumeric text here -- for instance:</p> <pre><code>salt: \"personwomanmancameratv\"\n</code></pre>"},{"location":"getting-started/quickstart/#making-an-experiment","title":"Making an experiment","text":"<p>To create a new experiment from the boilerplate template Pushkin provides, run</p> <pre><code> pushkin install experiment\n</code></pre> <p>Choose a basic experiment. When prompted, name your experiment <code>vocab</code> and choose the recommended version. Choose 'no' when asked if you want to import a jsPsych experiment. Repeat the process to add basic experiments called <code>mind</code> and <code>whichenglish</code> as well.</p> <p></p> <p>(See example output for this command here.)</p> <p>This will create a new folder in the experiments directory like this:</p> <pre><code>\u2514\u2500\u2500 vocab\n    \u251c\u2500\u2500 api controllers\n    \u251c\u2500\u2500 config.yaml\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 migrations\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 web page\n    \u2514\u2500\u2500 worker\n\u2514\u2500\u2500 mind\n    \u251c\u2500\u2500 api controllers\n    \u251c\u2500\u2500 config.yaml\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 migrations\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 web page\n    \u2514\u2500\u2500 worker\n\u2514\u2500\u2500 whichenglish\n    \u251c\u2500\u2500 api controllers\n    \u251c\u2500\u2500 config.yaml\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 migrations\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 web page\n    \u2514\u2500\u2500 worker\n</code></pre> <p>Each experiment has its own folder. Within this experiment-specific folder, there is also configuration file (<code>config.yaml</code>), which allows you to define a human-readable full name for the experiment (e.g., Which English? for <code>whichenglish</code>), specify a database to use, and make other customizations.</p> <p>Keeping all the files for an experiment within the same root folder is convenient for development, but not for actually deploying the website. To redistribute the experiment files to the right places, run:</p> <pre><code> pushkin prep\n</code></pre> <p></p> <p>(See example output for this command here.)</p>"},{"location":"getting-started/quickstart/#setting-up-logins","title":"Setting up logins","text":"<p>Coming soon!</p>"},{"location":"getting-started/quickstart/#local-testing","title":"Local testing","text":"<p>Now, let\u2019s look at your website! Make sure Docker is running by running the command <code>docker info</code>; if it is not, you can run <code>dockerd</code> or <code>sudo dockerd</code> to start it. Next, run:</p> <pre><code> pushkin start\n</code></pre> <p></p> <p>(See example output for this command here.)</p> <p>Now browse to <code>http://localhost</code> to see the stub website.</p> <p></p> <p>If you are using an AWS EC2 instance, navigate to the IPv4 Public IP address of your instance instead of <code>http://localhost</code>. This can be found in the AWS EC2 console. Note: You will not be able to locally test a default site if you are using an AWS EC2 instance. The authentication software used in the default site template requires the site to be accessed from localhost. In order to locally test a site on an AWS EC2 instance, it must have a \"basic\" site template.</p> <p></p> <p>When you are done looking at your website, stop it by running:</p> <pre><code> pushkin stop\n</code></pre> <p></p> <p>If you don\u2019t do that, the web server will keep running in Docker until you quit Docker or restart. When the command has finished running, it should output <code>done</code>.</p>"},{"location":"getting-started/quickstart/#updating","title":"Updating","text":"<p>Every time you update code or add an experiment, you\u2019ll need to run pushkin prep again:</p> <pre><code> pushkin prep\n pushkin start\n</code></pre>"},{"location":"getting-started/quickstart/#viewing-your-database-with-a-postgres-manager","title":"Viewing your database with a Postgres manager","text":"<p>By default, the Pushkin creates a database called <code>test_db</code> where your data is stored. (This is explained in further detail here.) In order to view your database and easily see your data, you should install a Postgres Manager such as SQLPro for Postgres, which costs $7.99/month after the free trial ends. Free and open-source managers are also available (e.g., pgAdmin). Or, if you become very comfortable connecting to postgres through the command line (not documented in this tutorial), then you may not need a Postgres manager.</p> <p>This tutorial will assume that you've downloaded and installed pgAdmin. Windows, macOS, and Ubuntu users can all download pgAdmin from their official download page. Ubuntu users can also install it from the command line using these instructions.</p> <p>When you start pgAdmin, it will take a moment to load and then will appear as a new tab in your web browser. When you install it the first time, it will ask you to set a master password. This can be whatever you'd like, but make sure you keep it in a secure place.</p> <p></p> <p>Under the Quick Links, click Add New Server. (Make sure you have run <code>pushkin start;</code> and that your site is running in <code>localhost</code> or at your IPv4 Public IP address.) Then follow these steps:</p> <ol> <li>You can set the name of the server to anything, for example <code>Pushkin Testing</code>.</li> <li>Then move to the Connection tab and set Host name/address to <code>localhost</code> (or your IPv4 Public IP address).</li> <li>Set the password to the default password, <code>example</code>, which you can find in <code>pushkin.yaml</code>.</li> <li>Click Save and your Pushkin Testing server should appear in the left sidebar.</li> </ol> <p></p> <p>To view your data tables, navigate to the left sidebar:</p> <ol> <li>Click to expand your Pushkin Testing server.</li> <li>Select test_db under Databases.</li> <li>Select Schemas, which will also open its subitem public.</li> <li>Under public, choose Tables.</li> </ol> <p>By default, you should have 5 tables: <code>knex_migrations</code>, <code>knex_migrations_lock</code>, <code>pushkin_userMeta</code>, <code>pushkin_userResults</code>, and <code>pushkin_users</code>. You should also have one table for each experiment; if you've followed this tutorial, you should also have <code>mind_stimulusResponses</code>, <code>vocab_stimulusResponses</code>, and <code>which_english_stimulusResponses</code>.</p> <p></p> <p>To view a given table, right-click on it, hover over View/Edit Data, and click on All Rows, which will then appear in a new pgAdmin tab.</p> <p></p> <p>For more information on how to use pgAdmin, you can read their documentation here.</p>"},{"location":"getting-started/quickstart/#starting-over","title":"Starting over","text":"<p>The great thing about Docker is that it saves your work. (Read up on Docker to see what I mean.) The bad thing is that it saves your work. Simply editing your code locally may not change what Docker thinks the code is. If you are updating something but it\u2019s not showing up in your website or if you are getting error messages from Docker \u2026 ideally, you should read up on Docker. However, as a fail-safe, run <code>pushkin kill</code> to delete all your Pushkin-specific code in Docker. Then just run <code>pushkin prep</code> again. This will take a while but should address any Docker-specific problems. If you really need a fresh Docker install, run <code>pushkin armageddon</code>, which will completely clean Docker.</p> <p>To get the latest news and updates on Pushkin, sign up for our newsletter here.</p>"},{"location":"getting-started/quickstart/sample_output/","title":"Quickstart: Example Outputs","text":""},{"location":"getting-started/quickstart/sample_output/#skip-to-section","title":"Skip to section","text":"<ul> <li>Example output for <code>pushkin install site</code></li> <li>Example output for <code>pushkin install experiment</code></li> <li>Example output for <code>pushkin prep</code></li> <li>Example output for <code>pushkin start;</code></li> </ul>"},{"location":"getting-started/quickstart/sample_output/#example-output-for-pushkin-install-site","title":"Example output for <code>pushkin install site</code>","text":"<pre><code>? Which site template do you want to use? default\nhttps://api.github.com/repos/pushkin-consortium/pushkin-sitetemplates-default/releases\nhttps://api.github.com/repos/pushkin-consortium/pushkin-sitetemplates-default/releases\n? Which version? (Recommend:v1.1.0) v1.1.0\nretrieving from https://api.github.com/repos/pushkin-consortium/pushkin-sitetemplates-default/releases/29180115\nbe patient...\nhttps://github.com/pushkin-consortium/pushkin-sitetemplates-default/releases/download/v1.1.0/Archive.zip\nfinished downloading\nInstalling dependencies for api\nInstalling dependencies for front-end\nBuilding api\napi is built\nBuilding front-end\nfront-end is built\n</code></pre>"},{"location":"getting-started/quickstart/sample_output/#example-output-for-pushkin-install-experiment","title":"Example output for <code>pushkin install experiment</code>","text":"<pre><code>? Which experiment template do you want to use? basic\nhttps://api.github.com/repos/pushkin-consortium/pushkin-exptemplates-basic/releases\nhttps://api.github.com/repos/pushkin-consortium/pushkin-exptemplates-basic/releases\n? Which version? (Recommend:v3.0.0) v3.0.0\n? What do you want to call your experiment? vocab\nMaking vocab in /home/parker/Desktop/pushkin_testing/experiments\nretrieving from https://api.github.com/repos/pushkin-consortium/pushkin-exptemplates-basic/releases/28951926\nbe patient...\nfinished downloading\nInstalling dependencies for api controllers\nInstalling dependencies for web page\nInstalling dependencies for worker\nloaded compFile\nBuilding worker\nworker is built\nBuilding vocab_api from api controllers\nvocab_api is built\nvocab_api is published locally via yalc\nvocab_api added to build cycle via yalc\nBuilding vocab_web from web page\nvocab_web is built\nvocab_web is published locally via yalc\nvocab_web added to build cycle via yalc\n</code></pre>"},{"location":"getting-started/quickstart/sample_output/#example-output-for-pushkin-prep","title":"Example output for <code>pushkin prep</code>","text":"<pre><code>package manager:  yarn\nresetting experiments.js\nStarted prepping API for vocab\nStarted loading API controller for vocab\nmodDir:  /home/parker/Desktop/pushkin_testing/experiments/vocab/api controllers\nUsing build-if-changed for  vocab_api\nInstalling dependencies for /home/parker/Desktop/pushkin_testing/experiments/vocab/api controllers\nStarted prepping web page for vocab\nStarted loading web page for vocab\nmodDir:  /home/parker/Desktop/pushkin_testing/experiments/vocab/web page\nUsing build-if-changed for  vocab_web\nInstalling dependencies for /home/parker/Desktop/pushkin_testing/experiments/vocab/web page\nBuilding worker for vocab\nWaiting for database to start...\nBuilding vocab_api from /home/parker/Desktop/pushkin_testing/experiments/vocab/api controllers\n...\nBuilding vocab_web from /home/parker/Desktop/pushkin_testing/experiments/vocab/web page\nvocab_api is built\nvocab_api is published locally via yalc\n...\nvocab_web is built\nvocab_web is published locally via yalc\nLoaded web page for vocab (vocab_web)\nAdded vocab to experiments.js\nWriting out experiments.js\nInstalling combined API\nInstalled combined API\nInstalling combined front-end\nInstalled combined front-end\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\nMap(1) {\n  'localtestdb' =&gt; [\n    {\n      migrations: '/home/parker/Desktop/pushkin_testing/users/migrations',\n      seeds: ''\n    },\n    {\n      migrations: '/home/parker/Desktop/pushkin_testing/experiments/vocab/migrations',\n      seeds: '/home/parker/Desktop/pushkin_testing/experiments/vocab'\n    }\n  ]\n}\n{\n  localtestdb: {\n    user: 'postgres',\n    pass: 'example',\n    url: 'localhost',\n    name: 'test_db'\n  }\n}\nstarting migrations...\nFS-related option specified for migration configuration. This resets migrationSource to default FsMigrations\nSetup databases successfully\n Database updated. Shutting down...\n</code></pre>"},{"location":"getting-started/quickstart/sample_output/#example-output-for-pushkin-start","title":"Example output for <code>pushkin start;</code>","text":"<pre><code>Pulling message-queue (rabbitmq:3.6-management)...\n3.6-management: Pulling from library/rabbitmq\nDigest: sha256:05bd722c6b0c747ae7f854baa9e9ceb9b47da75e39f93ad6a1db74f788b0f828\nStatus: Downloaded newer image for rabbitmq:3.6-management\nBuilding api\nStep 1/9 : FROM node:latest\n ---&gt; 4495f296c63b\nStep 2/9 : COPY ./src /usr/src/app/src\n ---&gt; 97de4b6f2329\nStep 3/9 : COPY .yalc /usr/src/app/.yalc/\n ---&gt; 2d458b4765b5\nStep 4/9 : COPY ./package.json ./yarn.lock ./.babelrc ./yalc.lock ./dockerStart.sh /usr/src/app/\n ---&gt; 08066f98d19a\nStep 5/9 : WORKDIR /usr/src/app\n ---&gt; Running in 441c977fa797\nRemoving intermediate container 441c977fa797\n ---&gt; 3bbe12015256\nStep 6/9 : RUN yarn install\n ---&gt; Running in f4a24c61033d\nyarn install v1.22.4\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nDone in 13.42s.\nRemoving intermediate container f4a24c61033d\n ---&gt; b3c6633ae326\nStep 7/9 : RUN yarn build\n ---&gt; Running in 4e789ea668f8\nyarn run v1.22.4\n$ rm -rf build/* &amp;&amp; babel src -d build &amp;&amp; cp src/controllers.json build/\nSuccessfully compiled 1 file with Babel (551ms).\nDone in 0.89s.\nRemoving intermediate container 4e789ea668f8\n ---&gt; 7fdf9e401662\nStep 8/9 : RUN apt-get update &amp;&amp; apt-get install -y netcat\n ---&gt; Running in 829498b20e05\nGet:1 http://security.debian.org/debian-security stretch/updates InRelease [53.0 kB]\nIgn:2 http://deb.debian.org/debian stretch InRelease\nGet:3 http://deb.debian.org/debian stretch-updates InRelease [93.6 kB]\nGet:4 http://deb.debian.org/debian stretch Release [118 kB]\nGet:5 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [542 kB]\nGet:6 http://deb.debian.org/debian stretch Release.gpg [2410 B]\nGet:7 http://deb.debian.org/debian stretch-updates/main amd64 Packages [2596 B]\nGet:8 http://deb.debian.org/debian stretch/main amd64 Packages [7080 kB]\nFetched 7891 kB in 2s (2643 kB/s)\nReading package lists...\nReading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  netcat-traditional\nThe following NEW packages will be installed:\n  netcat netcat-traditional\n0 upgraded, 2 newly installed, 0 to remove and 18 not upgraded.\nNeed to get 76.0 kB of archives.\nAfter this operation, 173 kB of additional disk space will be used.\nGet:1 http://deb.debian.org/debian stretch/main amd64 netcat-traditional amd64 1.10-41+b1 [67.0 kB]\nGet:2 http://deb.debian.org/debian stretch/main amd64 netcat all 1.10-41 [8962 B]\ndebconf: delaying package configuration, since apt-utils is not installed\nFetched 76.0 kB in 0s (474 kB/s)\nSelecting previously unselected package netcat-traditional.\n(Reading database ... 29937 files and directories currently installed.)\nPreparing to unpack .../netcat-traditional_1.10-41+b1_amd64.deb ...\nUnpacking netcat-traditional (1.10-41+b1) ...\nSelecting previously unselected package netcat.\nPreparing to unpack .../netcat_1.10-41_all.deb ...\nUnpacking netcat (1.10-41) ...\nSetting up netcat-traditional (1.10-41+b1) ...\nupdate-alternatives: using /bin/nc.traditional to provide /bin/nc (nc) in auto mode\nSetting up netcat (1.10-41) ...\nRemoving intermediate container 829498b20e05\n ---&gt; 54fa1e297040\nStep 9/9 : CMD [\"bash\", \"dockerStart.sh\"]\n ---&gt; Running in dd663aea5237\nRemoving intermediate container dd663aea5237\n ---&gt; 4d85628ad923\nSuccessfully built 4d85628ad923\nSuccessfully tagged pushkin_api:latest\nBuilding server\nStep 1/10 : FROM node:latest\n ---&gt; 4495f296c63b\nStep 2/10 : COPY ./public /usr/src/app/public\n ---&gt; 6ab6701b2bb1\nStep 3/10 : COPY ./src /usr/src/app/src\n ---&gt; 9a51d2470254\nStep 4/10 : COPY .yalc /usr/src/app/.yalc/\n ---&gt; aa87afaa3fd0\nStep 5/10 : COPY ./experiments.js /usr/src/app/src/\n ---&gt; 4bce4d5786ca\nStep 6/10 : COPY ./package.json ./yarn.lock ./yalc.lock /usr/src/app/\n ---&gt; dbdf502c1f0d\nStep 7/10 : WORKDIR /usr/src/app\n ---&gt; Running in e7522226cc73\nRemoving intermediate container e7522226cc73\n ---&gt; 17e630e2ea5c\nStep 8/10 : RUN yarn install\n ---&gt; Running in 0fa50e61707c\nyarn install v1.22.4\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@2.1.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.1.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@2.1.3: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.1.3\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\nwarning \" &gt; bootstrap@4.5.0\" has unmet peer dependency \"jquery@1.9.1 - 3\".\nwarning \" &gt; bootstrap@4.5.0\" has unmet peer dependency \"popper.js@^1.16.0\".\nwarning \" &gt; styled-components@5.1.1\" has unmet peer dependency \"react-is@&gt;= 16.8.0\".\n[4/4] Building fresh packages...\nDone in 64.21s.\nRemoving intermediate container 0fa50e61707c\n ---&gt; 9f512bdde32b\nStep 9/10 : RUN apt-get update &amp;&amp; apt-get install -y netcat\n ---&gt; Running in c1953ca4dace\nGet:1 http://security.debian.org/debian-security stretch/updates InRelease [53.0 kB]\nIgn:2 http://deb.debian.org/debian stretch InRelease\nGet:3 http://deb.debian.org/debian stretch-updates InRelease [93.6 kB]\nGet:4 http://deb.debian.org/debian stretch Release [118 kB]\nGet:5 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [542 kB]\nGet:6 http://deb.debian.org/debian stretch Release.gpg [2410 B]\nGet:7 http://deb.debian.org/debian stretch-updates/main amd64 Packages [2596 B]\nGet:8 http://deb.debian.org/debian stretch/main amd64 Packages [7080 kB]\nFetched 7891 kB in 2s (2780 kB/s)\nReading package lists...\nReading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  netcat-traditional\nThe following NEW packages will be installed:\n  netcat netcat-traditional\n0 upgraded, 2 newly installed, 0 to remove and 18 not upgraded.\nNeed to get 76.0 kB of archives.\nAfter this operation, 173 kB of additional disk space will be used.\nGet:1 http://deb.debian.org/debian stretch/main amd64 netcat-traditional amd64 1.10-41+b1 [67.0 kB]\nGet:2 http://deb.debian.org/debian stretch/main amd64 netcat all 1.10-41 [8962 B]\ndebconf: delaying package configuration, since apt-utils is not installed\nFetched 76.0 kB in 0s (512 kB/s)\nSelecting previously unselected package netcat-traditional.\n(Reading database ... 29937 files and directories currently installed.)\nPreparing to unpack .../netcat-traditional_1.10-41+b1_amd64.deb ...\nUnpacking netcat-traditional (1.10-41+b1) ...\nSelecting previously unselected package netcat.\nPreparing to unpack .../netcat_1.10-41_all.deb ...\nUnpacking netcat (1.10-41) ...\nSetting up netcat-traditional (1.10-41+b1) ...\nupdate-alternatives: using /bin/nc.traditional to provide /bin/nc (nc) in auto mode\nSetting up netcat (1.10-41) ...\nRemoving intermediate container c1953ca4dace\n ---&gt; a71f280d4de8\nStep 10/10 : CMD yarn start\n ---&gt; Running in cd0abf2c0d1c\nRemoving intermediate container cd0abf2c0d1c\n ---&gt; 486d4e9e9e6d\nSuccessfully built 486d4e9e9e6d\nSuccessfully tagged pushkin_server:latest\nStarting pushkin_test_db_1       ... done\nCreating pushkin_message-queue_1 ... done\nCreating pushkin_vocab_worker_1  ... done\nCreating pushkin_api_1           ... done\nCreating pushkin_server_1        ... done\n3.6-management: Pulling from library/rabbitmq\nDigest: sha256:05bd722c6b0c747ae7f854baa9e9ceb9b47da75e39f93ad6a1db74f788b0f828\nStatus: Downloaded newer image for rabbitmq:3.6-management\nStep 1/9 : FROM node:latest\n ---&gt; 4495f296c63b\nStep 2/9 : COPY ./src /usr/src/app/src\n ---&gt; 97de4b6f2329\nStep 3/9 : COPY .yalc /usr/src/app/.yalc/\n ---&gt; 2d458b4765b5\nStep 4/9 : COPY ./package.json ./yarn.lock ./.babelrc ./yalc.lock ./dockerStart.sh /usr/src/app/\n ---&gt; 08066f98d19a\nStep 5/9 : WORKDIR /usr/src/app\n ---&gt; Running in 441c977fa797\nRemoving intermediate container 441c977fa797\n ---&gt; 3bbe12015256\nStep 6/9 : RUN yarn install\n ---&gt; Running in f4a24c61033d\nyarn install v1.22.4\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\nDone in 13.42s.\nRemoving intermediate container f4a24c61033d\n ---&gt; b3c6633ae326\nStep 7/9 : RUN yarn build\n ---&gt; Running in 4e789ea668f8\nyarn run v1.22.4\n$ rm -rf build/* &amp;&amp; babel src -d build &amp;&amp; cp src/controllers.json build/\nSuccessfully compiled 1 file with Babel (551ms).\nDone in 0.89s.\nRemoving intermediate container 4e789ea668f8\n ---&gt; 7fdf9e401662\nStep 8/9 : RUN apt-get update &amp;&amp; apt-get install -y netcat\n ---&gt; Running in 829498b20e05\nGet:1 http://security.debian.org/debian-security stretch/updates InRelease [53.0 kB]\nIgn:2 http://deb.debian.org/debian stretch InRelease\nGet:3 http://deb.debian.org/debian stretch-updates InRelease [93.6 kB]\nGet:4 http://deb.debian.org/debian stretch Release [118 kB]\nGet:5 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [542 kB]\nGet:6 http://deb.debian.org/debian stretch Release.gpg [2410 B]\nGet:7 http://deb.debian.org/debian stretch-updates/main amd64 Packages [2596 B]\nGet:8 http://deb.debian.org/debian stretch/main amd64 Packages [7080 kB]\nFetched 7891 kB in 2s (2643 kB/s)\nReading package lists...\nReading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  netcat-traditional\nThe following NEW packages will be installed:\n  netcat netcat-traditional\n0 upgraded, 2 newly installed, 0 to remove and 18 not upgraded.\nNeed to get 76.0 kB of archives.\nAfter this operation, 173 kB of additional disk space will be used.\nGet:1 http://deb.debian.org/debian stretch/main amd64 netcat-traditional amd64 1.10-41+b1 [67.0 kB]\nGet:2 http://deb.debian.org/debian stretch/main amd64 netcat all 1.10-41 [8962 B]\ndebconf: delaying package configuration, since apt-utils is not installed\nFetched 76.0 kB in 0s (474 kB/s)\nSelecting previously unselected package netcat-traditional.\n(Reading database ... 29937 files and directories currently installed.)\nPreparing to unpack .../netcat-traditional_1.10-41+b1_amd64.deb ...\nUnpacking netcat-traditional (1.10-41+b1) ...\nSelecting previously unselected package netcat.\nPreparing to unpack .../netcat_1.10-41_all.deb ...\nUnpacking netcat (1.10-41) ...\nSetting up netcat-traditional (1.10-41+b1) ...\nupdate-alternatives: using /bin/nc.traditional to provide /bin/nc (nc) in auto mode\nSetting up netcat (1.10-41) ...\nRemoving intermediate container 829498b20e05\n ---&gt; 54fa1e297040\nStep 9/9 : CMD [\"bash\", \"dockerStart.sh\"]\n ---&gt; Running in dd663aea5237\nRemoving intermediate container dd663aea5237\n ---&gt; 4d85628ad923\nSuccessfully built 4d85628ad923\nSuccessfully tagged pushkin_api:latest\nStep 1/10 : FROM node:latest\n ---&gt; 4495f296c63b\nStep 2/10 : COPY ./public /usr/src/app/public\n ---&gt; 6ab6701b2bb1\nStep 3/10 : COPY ./src /usr/src/app/src\n ---&gt; 9a51d2470254\nStep 4/10 : COPY .yalc /usr/src/app/.yalc/\n ---&gt; aa87afaa3fd0\nStep 5/10 : COPY ./experiments.js /usr/src/app/src/\n ---&gt; 4bce4d5786ca\nStep 6/10 : COPY ./package.json ./yarn.lock ./yalc.lock /usr/src/app/\n ---&gt; dbdf502c1f0d\nStep 7/10 : WORKDIR /usr/src/app\n ---&gt; Running in e7522226cc73\nRemoving intermediate container e7522226cc73\n ---&gt; 17e630e2ea5c\nStep 8/10 : RUN yarn install\n ---&gt; Running in 0fa50e61707c\nyarn install v1.22.4\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@2.1.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.1.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@2.1.3: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.1.3\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\nwarning \" &gt; bootstrap@4.5.0\" has unmet peer dependency \"jquery@1.9.1 - 3\".\nwarning \" &gt; bootstrap@4.5.0\" has unmet peer dependency \"popper.js@^1.16.0\".\nwarning \" &gt; styled-components@5.1.1\" has unmet peer dependency \"react-is@&gt;= 16.8.0\".\n[4/4] Building fresh packages...\nDone in 64.21s.\nRemoving intermediate container 0fa50e61707c\n ---&gt; 9f512bdde32b\nStep 9/10 : RUN apt-get update &amp;&amp; apt-get install -y netcat\n ---&gt; Running in c1953ca4dace\nGet:1 http://security.debian.org/debian-security stretch/updates InRelease [53.0 kB]\nIgn:2 http://deb.debian.org/debian stretch InRelease\nGet:3 http://deb.debian.org/debian stretch-updates InRelease [93.6 kB]\nGet:4 http://deb.debian.org/debian stretch Release [118 kB]\nGet:5 http://security.debian.org/debian-security stretch/updates/main amd64 Packages [542 kB]\nGet:6 http://deb.debian.org/debian stretch Release.gpg [2410 B]\nGet:7 http://deb.debian.org/debian stretch-updates/main amd64 Packages [2596 B]\nGet:8 http://deb.debian.org/debian stretch/main amd64 Packages [7080 kB]\nFetched 7891 kB in 2s (2780 kB/s)\nReading package lists...\nReading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  netcat-traditional\nThe following NEW packages will be installed:\n  netcat netcat-traditional\n0 upgraded, 2 newly installed, 0 to remove and 18 not upgraded.\nNeed to get 76.0 kB of archives.\nAfter this operation, 173 kB of additional disk space will be used.\nGet:1 http://deb.debian.org/debian stretch/main amd64 netcat-traditional amd64 1.10-41+b1 [67.0 kB]\nGet:2 http://deb.debian.org/debian stretch/main amd64 netcat all 1.10-41 [8962 B]\ndebconf: delaying package configuration, since apt-utils is not installed\nFetched 76.0 kB in 0s (512 kB/s)\nSelecting previously unselected package netcat-traditional.\n(Reading database ... 29937 files and directories currently installed.)\nPreparing to unpack .../netcat-traditional_1.10-41+b1_amd64.deb ...\nUnpacking netcat-traditional (1.10-41+b1) ...\nSelecting previously unselected package netcat.\nPreparing to unpack .../netcat_1.10-41_all.deb ...\nUnpacking netcat (1.10-41) ...\nSetting up netcat-traditional (1.10-41+b1) ...\nupdate-alternatives: using /bin/nc.traditional to provide /bin/nc (nc) in auto mode\nSetting up netcat (1.10-41) ...\nRemoving intermediate container c1953ca4dace\n ---&gt; a71f280d4de8\nStep 10/10 : CMD yarn start\n ---&gt; Running in cd0abf2c0d1c\nRemoving intermediate container cd0abf2c0d1c\n ---&gt; 486d4e9e9e6d\nSuccessfully built 486d4e9e9e6d\nSuccessfully tagged pushkin_server:latest\n Starting. You may not be able to load localhost for a minute or two.\n</code></pre>"}]}